
vcu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003688  08003688  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003690  08003690  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  080036a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080036a4  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df57  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001af0  00000000  00000000  0002df93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  0002fa88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e80  00000000  00000000  000309b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fa2f  00000000  00000000  00031838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8c7  00000000  00000000  00051267  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3bb8  00000000  00000000  0005bb2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f6e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041bc  00000000  00000000  0011f764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003658 	.word	0x08003658

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003658 	.word	0x08003658

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <servo_angle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void servo_angle(int angle)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if(angle<0)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	da01      	bge.n	80004da <servo_angle+0x12>
		angle = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
	if(angle>180)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2bb4      	cmp	r3, #180	; 0xb4
 80004de:	dd01      	ble.n	80004e4 <servo_angle+0x1c>
		angle = 180;
 80004e0:	23b4      	movs	r3, #180	; 0xb4
 80004e2:	607b      	str	r3, [r7, #4]
	angle = angle +45;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	332d      	adds	r3, #45	; 0x2d
 80004e8:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, angle);
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <servo_angle+0x38>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	200000fc 	.word	0x200000fc

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fe9d 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f83f 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 faff 	bl	8000b14 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000516:	f000 f907 	bl	8000728 <MX_TIM1_Init>
  MX_TIM8_Init();
 800051a:	f000 f989 	bl	8000830 <MX_TIM8_Init>
  MX_TIM12_Init();
 800051e:	f000 fa0b 	bl	8000938 <MX_TIM12_Init>
  MX_CAN1_Init();
 8000522:	f000 f89f 	bl	8000664 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000526:	f000 f8d1 	bl	80006cc <MX_I2C1_Init>
  MX_UART4_Init();
 800052a:	f000 fa4b 	bl	80009c4 <MX_UART4_Init>
  MX_UART5_Init();
 800052e:	f000 fa73 	bl	8000a18 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fa9b 	bl	8000a6c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000536:	f000 fac3 	bl	8000ac0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800053a:	2100      	movs	r1, #0
 800053c:	4813      	ldr	r0, [pc, #76]	; (800058c <main+0x88>)
 800053e:	f002 f84d 	bl	80025dc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i = 0; i<=180;i++)
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e008      	b.n	800055a <main+0x56>
	  	  {
	  		  servo_angle(i);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff ffbd 	bl	80004c8 <servo_angle>
	  		  HAL_Delay(10);
 800054e:	200a      	movs	r0, #10
 8000550:	f000 feec 	bl	800132c <HAL_Delay>
	  for(int i = 0; i<=180;i++)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3301      	adds	r3, #1
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2bb4      	cmp	r3, #180	; 0xb4
 800055e:	ddf3      	ble.n	8000548 <main+0x44>
	  	  }
	  	  servo_angle(0);
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff ffb1 	bl	80004c8 <servo_angle>
	  	  HAL_Delay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 fedf 	bl	800132c <HAL_Delay>
	  	  servo_angle(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f7ff ffaa 	bl	80004c8 <servo_angle>
	  	  HAL_Delay(2000);
 8000574:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000578:	f000 fed8 	bl	800132c <HAL_Delay>
	  	  servo_angle(0);
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ffa3 	bl	80004c8 <servo_angle>
	  	  HAL_Delay(50);
 8000582:	2032      	movs	r0, #50	; 0x32
 8000584:	f000 fed2 	bl	800132c <HAL_Delay>
	  for(int i = 0; i<=180;i++)
 8000588:	e7db      	b.n	8000542 <main+0x3e>
 800058a:	bf00      	nop
 800058c:	200000fc 	.word	0x200000fc

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f852 	bl	8003648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000604:	23a8      	movs	r3, #168	; 0xa8
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fb79 	bl	8001d0c <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 fb08 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2105      	movs	r1, #5
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fdd2 	bl	80021ec <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800064e:	f000 faf1 	bl	8000c34 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	; 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_CAN1_Init+0x60>)
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_CAN1_Init+0x64>)
 800066c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_CAN1_Init+0x60>)
 8000670:	2210      	movs	r2, #16
 8000672:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_CAN1_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_CAN1_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_CAN1_Init+0x60>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_CAN1_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_CAN1_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_CAN1_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_CAN1_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_CAN1_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_CAN1_Init+0x60>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_CAN1_Init+0x60>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_CAN1_Init+0x60>)
 80006b2:	f000 fe5d 	bl	8001370 <HAL_CAN_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 faba 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200001fc 	.word	0x200001fc
 80006c8:	40006400 	.word	0x40006400

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0x50>)
 800070a:	f001 f9c7 	bl	8001a9c <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 fa8e 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000068 	.word	0x20000068
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b092      	sub	sp, #72	; 0x48
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2220      	movs	r2, #32
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 ff78 	bl	8003648 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000758:	4b33      	ldr	r3, [pc, #204]	; (8000828 <MX_TIM1_Init+0x100>)
 800075a:	4a34      	ldr	r2, [pc, #208]	; (800082c <MX_TIM1_Init+0x104>)
 800075c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 355;
 800075e:	4b32      	ldr	r3, [pc, #200]	; (8000828 <MX_TIM1_Init+0x100>)
 8000760:	f240 1263 	movw	r2, #355	; 0x163
 8000764:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <MX_TIM1_Init+0x100>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4718;
 800076c:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <MX_TIM1_Init+0x100>)
 800076e:	f241 226e 	movw	r2, #4718	; 0x126e
 8000772:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <MX_TIM1_Init+0x100>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <MX_TIM1_Init+0x100>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <MX_TIM1_Init+0x100>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000786:	4828      	ldr	r0, [pc, #160]	; (8000828 <MX_TIM1_Init+0x100>)
 8000788:	f001 fefc 	bl	8002584 <HAL_TIM_PWM_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 fa4f 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800079e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a2:	4619      	mov	r1, r3
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <MX_TIM1_Init+0x100>)
 80007a6:	f002 fa93 	bl	8002cd0 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80007b0:	f000 fa40 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <MX_TIM1_Init+0x100>)
 80007da:	f001 ff3d 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80007e4:	f000 fa26 	bl	8000c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM1_Init+0x100>)
 800080c:	f002 fadc 	bl	8002dc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000816:	f000 fa0d 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM1_Init+0x100>)
 800081c:	f000 fb18 	bl	8000e50 <HAL_TIM_MspPostInit>

}
 8000820:	bf00      	nop
 8000822:	3748      	adds	r7, #72	; 0x48
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000fc 	.word	0x200000fc
 800082c:	40010000 	.word	0x40010000

08000830 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b092      	sub	sp, #72	; 0x48
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2220      	movs	r2, #32
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fef4 	bl	8003648 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000860:	4b33      	ldr	r3, [pc, #204]	; (8000930 <MX_TIM8_Init+0x100>)
 8000862:	4a34      	ldr	r2, [pc, #208]	; (8000934 <MX_TIM8_Init+0x104>)
 8000864:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <MX_TIM8_Init+0x100>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b30      	ldr	r3, [pc, #192]	; (8000930 <MX_TIM8_Init+0x100>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_TIM8_Init+0x100>)
 8000874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000878:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <MX_TIM8_Init+0x100>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000880:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_TIM8_Init+0x100>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_TIM8_Init+0x100>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800088c:	4828      	ldr	r0, [pc, #160]	; (8000930 <MX_TIM8_Init+0x100>)
 800088e:	f001 fe79 	bl	8002584 <HAL_TIM_PWM_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8000898:	f000 f9cc 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008a8:	4619      	mov	r1, r3
 80008aa:	4821      	ldr	r0, [pc, #132]	; (8000930 <MX_TIM8_Init+0x100>)
 80008ac:	f002 fa10 	bl	8002cd0 <HAL_TIMEx_MasterConfigSynchronization>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80008b6:	f000 f9bd 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ba:	2360      	movs	r3, #96	; 0x60
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	2208      	movs	r2, #8
 80008dc:	4619      	mov	r1, r3
 80008de:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_TIM8_Init+0x100>)
 80008e0:	f001 feba 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80008ea:	f000 f9a3 	bl	8000c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000906:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM8_Init+0x100>)
 8000912:	f002 fa59 	bl	8002dc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 800091c:	f000 f98a 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM8_Init+0x100>)
 8000922:	f000 fa95 	bl	8000e50 <HAL_TIM_MspPostInit>

}
 8000926:	bf00      	nop
 8000928:	3748      	adds	r7, #72	; 0x48
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000028 	.word	0x20000028
 8000934:	40010400 	.word	0x40010400

08000938 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
 800094c:	615a      	str	r2, [r3, #20]
 800094e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_TIM12_Init+0x84>)
 8000952:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <MX_TIM12_Init+0x88>)
 8000954:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_TIM12_Init+0x84>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_TIM12_Init+0x84>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_TIM12_Init+0x84>)
 8000964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000968:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_TIM12_Init+0x84>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_TIM12_Init+0x84>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000976:	4811      	ldr	r0, [pc, #68]	; (80009bc <MX_TIM12_Init+0x84>)
 8000978:	f001 fe04 	bl	8002584 <HAL_TIM_PWM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000982:	f000 f957 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000986:	2360      	movs	r3, #96	; 0x60
 8000988:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	4619      	mov	r1, r3
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <MX_TIM12_Init+0x84>)
 800099e:	f001 fe5b 	bl	8002658 <HAL_TIM_PWM_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80009a8:	f000 f944 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <MX_TIM12_Init+0x84>)
 80009ae:	f000 fa4f 	bl	8000e50 <HAL_TIM_MspPostInit>

}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000224 	.word	0x20000224
 80009c0:	40001800 	.word	0x40001800

080009c4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MX_UART4_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009fc:	f002 fa36 	bl	8002e6c <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a06:	f000 f915 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000017c 	.word	0x2000017c
 8000a14:	40004c00 	.word	0x40004c00

08000a18 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_UART5_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_UART5_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_UART5_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_UART5_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_UART5_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_UART5_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_UART5_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_UART5_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_UART5_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_UART5_Init+0x4c>)
 8000a50:	f002 fa0c 	bl	8002e6c <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f000 f8eb 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000bc 	.word	0x200000bc
 8000a68:	40005000 	.word	0x40005000

08000a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART2_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f002 f9e2 	bl	8002e6c <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aae:	f000 f8c1 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200001bc 	.word	0x200001bc
 8000abc:	40004400 	.word	0x40004400

08000ac0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART6_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART6_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART6_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART6_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART6_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART6_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART6_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART6_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART6_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART6_UART_Init+0x4c>)
 8000af8:	f002 f9b8 	bl	8002e6c <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f897 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000013c 	.word	0x2000013c
 8000b10:	40011400 	.word	0x40011400

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b3e      	ldr	r3, [pc, #248]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a3d      	ldr	r2, [pc, #244]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a36      	ldr	r2, [pc, #216]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a28      	ldr	r2, [pc, #160]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_GPIO_Init+0x114>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_O1_Pin|RELAY2_O_Pin|RELAY1_O_Pin|GPIO_O5_Pin
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f644 4106 	movw	r1, #19462	; 0x4c06
 8000bbc:	481b      	ldr	r0, [pc, #108]	; (8000c2c <MX_GPIO_Init+0x118>)
 8000bbe:	f000 ff53 	bl	8001a68 <HAL_GPIO_WritePin>
                          |GPIO_O4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_O3_Pin|GPIO_O2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2130      	movs	r1, #48	; 0x30
 8000bc6:	481a      	ldr	r0, [pc, #104]	; (8000c30 <MX_GPIO_Init+0x11c>)
 8000bc8:	f000 ff4e 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_O1_Pin RELAY2_O_Pin RELAY1_O_Pin GPIO_O5_Pin
                           GPIO_O4_Pin */
  GPIO_InitStruct.Pin = GPIO_O1_Pin|RELAY2_O_Pin|RELAY1_O_Pin|GPIO_O5_Pin
 8000bcc:	f644 4306 	movw	r3, #19462	; 0x4c06
 8000bd0:	617b      	str	r3, [r7, #20]
                          |GPIO_O4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4811      	ldr	r0, [pc, #68]	; (8000c2c <MX_GPIO_Init+0x118>)
 8000be6:	f000 fda5 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000bea:	2301      	movs	r3, #1
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <MX_GPIO_Init+0x118>)
 8000bfe:	f000 fd99 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_O3_Pin GPIO_O2_Pin */
  GPIO_InitStruct.Pin = GPIO_O3_Pin|GPIO_O2_Pin;
 8000c02:	2330      	movs	r3, #48	; 0x30
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_GPIO_Init+0x11c>)
 8000c1a:	f000 fd8b 	bl	8001734 <HAL_GPIO_Init>

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	; 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40020400 	.word	0x40020400

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_CAN_MspInit+0x84>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d12c      	bne.n	8000d10 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_CAN_MspInit+0x88>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <HAL_CAN_MspInit+0x88>)
 8000cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_CAN_MspInit+0x88>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_CAN_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_CAN_MspInit+0x88>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_CAN_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d00:	2309      	movs	r3, #9
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_CAN_MspInit+0x8c>)
 8000d0c:	f000 fd12 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40006400 	.word	0x40006400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400

08000d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_I2C_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12b      	bne.n	8000d9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_I2C_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_I2C_MspInit+0x88>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_I2C_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d62:	23c0      	movs	r3, #192	; 0xc0
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d66:	2312      	movs	r3, #18
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d72:	2304      	movs	r3, #4
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <HAL_I2C_MspInit+0x8c>)
 8000d7e:	f000 fcd9 	bl	8001734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_I2C_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_I2C_MspInit+0x88>)
 8000d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_I2C_MspInit+0x88>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40005400 	.word	0x40005400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020400 	.word	0x40020400

08000db4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10e      	bne.n	8000de4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_TIM_PWM_MspInit+0x90>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_TIM_PWM_MspInit+0x90>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_TIM_PWM_MspInit+0x90>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000de2:	e026      	b.n	8000e32 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_TIM_PWM_MspInit+0x94>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10e      	bne.n	8000e0c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_TIM_PWM_MspInit+0x90>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_TIM_PWM_MspInit+0x90>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_TIM_PWM_MspInit+0x90>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
}
 8000e0a:	e012      	b.n	8000e32 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_TIM_PWM_MspInit+0x98>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10d      	bne.n	8000e32 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_TIM_PWM_MspInit+0x90>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a09      	ldr	r2, [pc, #36]	; (8000e44 <HAL_TIM_PWM_MspInit+0x90>)
 8000e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_TIM_PWM_MspInit+0x90>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
}
 8000e32:	bf00      	nop
 8000e34:	371c      	adds	r7, #28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40010000 	.word	0x40010000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40010400 	.word	0x40010400
 8000e4c:	40001800 	.word	0x40001800

08000e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a37      	ldr	r2, [pc, #220]	; (8000f4c <HAL_TIM_MspPostInit+0xfc>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d11f      	bne.n	8000eb2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a35      	ldr	r2, [pc, #212]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	482a      	ldr	r0, [pc, #168]	; (8000f54 <HAL_TIM_MspPostInit+0x104>)
 8000eac:	f000 fc42 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000eb0:	e048      	b.n	8000f44 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a28      	ldr	r2, [pc, #160]	; (8000f58 <HAL_TIM_MspPostInit+0x108>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d11f      	bne.n	8000efc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ecc:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000eea:	2303      	movs	r3, #3
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4817      	ldr	r0, [pc, #92]	; (8000f54 <HAL_TIM_MspPostInit+0x104>)
 8000ef6:	f000 fc1d 	bl	8001734 <HAL_GPIO_Init>
}
 8000efa:	e023      	b.n	8000f44 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM12)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <HAL_TIM_MspPostInit+0x10c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d11e      	bne.n	8000f44 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_TIM_MspPostInit+0x100>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f34:	2309      	movs	r3, #9
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_TIM_MspPostInit+0x104>)
 8000f40:	f000 fbf8 	bl	8001734 <HAL_GPIO_Init>
}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40010000 	.word	0x40010000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40010400 	.word	0x40010400
 8000f5c:	40001800 	.word	0x40001800

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b090      	sub	sp, #64	; 0x40
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a73      	ldr	r2, [pc, #460]	; (800114c <HAL_UART_MspInit+0x1ec>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12c      	bne.n	8000fdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f86:	4b72      	ldr	r3, [pc, #456]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a71      	ldr	r2, [pc, #452]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8000f8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b6f      	ldr	r3, [pc, #444]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa2:	4b6b      	ldr	r3, [pc, #428]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a6a      	ldr	r2, [pc, #424]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b68      	ldr	r3, [pc, #416]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XBEE_TX_UA4_Pin|XBEE_RX_UA4_Pin;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	485f      	ldr	r0, [pc, #380]	; (8001154 <HAL_UART_MspInit+0x1f4>)
 8000fd6:	f000 fbad 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fda:	e0b3      	b.n	8001144 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==UART5)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a5d      	ldr	r2, [pc, #372]	; (8001158 <HAL_UART_MspInit+0x1f8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d14b      	bne.n	800107e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
 8000fea:	4b59      	ldr	r3, [pc, #356]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a58      	ldr	r2, [pc, #352]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8000ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b56      	ldr	r3, [pc, #344]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	4b52      	ldr	r3, [pc, #328]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a51      	ldr	r2, [pc, #324]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b48      	ldr	r3, [pc, #288]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001044:	2301      	movs	r3, #1
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800104c:	2308      	movs	r3, #8
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4619      	mov	r1, r3
 8001056:	4841      	ldr	r0, [pc, #260]	; (800115c <HAL_UART_MspInit+0x1fc>)
 8001058:	f000 fb6c 	bl	8001734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800105c:	2304      	movs	r3, #4
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001064:	2301      	movs	r3, #1
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800106c:	2308      	movs	r3, #8
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001074:	4619      	mov	r1, r3
 8001076:	483a      	ldr	r0, [pc, #232]	; (8001160 <HAL_UART_MspInit+0x200>)
 8001078:	f000 fb5c 	bl	8001734 <HAL_GPIO_Init>
}
 800107c:	e062      	b.n	8001144 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a38      	ldr	r2, [pc, #224]	; (8001164 <HAL_UART_MspInit+0x204>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d12c      	bne.n	80010e2 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8001092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a28      	ldr	r2, [pc, #160]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TTL__TX_UA2_Pin|TTL_RX_UA2_Pin;
 80010c0:	230c      	movs	r3, #12
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d0:	2307      	movs	r3, #7
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d8:	4619      	mov	r1, r3
 80010da:	481e      	ldr	r0, [pc, #120]	; (8001154 <HAL_UART_MspInit+0x1f4>)
 80010dc:	f000 fb2a 	bl	8001734 <HAL_GPIO_Init>
}
 80010e0:	e030      	b.n	8001144 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART6)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a20      	ldr	r2, [pc, #128]	; (8001168 <HAL_UART_MspInit+0x208>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d12b      	bne.n	8001144 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	4a16      	ldr	r2, [pc, #88]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 80010f6:	f043 0320 	orr.w	r3, r3, #32
 80010fa:	6453      	str	r3, [r2, #68]	; 0x44
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_UART_MspInit+0x1f0>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001124:	23c0      	movs	r3, #192	; 0xc0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001134:	2308      	movs	r3, #8
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <HAL_UART_MspInit+0x1fc>)
 8001140:	f000 faf8 	bl	8001734 <HAL_GPIO_Init>
}
 8001144:	bf00      	nop
 8001146:	3740      	adds	r7, #64	; 0x40
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40004c00 	.word	0x40004c00
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000
 8001158:	40005000 	.word	0x40005000
 800115c:	40020800 	.word	0x40020800
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40004400 	.word	0x40004400
 8001168:	40011400 	.word	0x40011400

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c0:	f000 f894 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <SystemInit+0x28>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <SystemInit+0x28>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SystemInit+0x28>)
 80011de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011e2:	609a      	str	r2, [r3, #8]
#endif
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011fa:	e003      	b.n	8001204 <LoopCopyDataInit>

080011fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001200:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001202:	3104      	adds	r1, #4

08001204 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001208:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800120a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800120c:	d3f6      	bcc.n	80011fc <CopyDataInit>
  ldr  r2, =_sbss
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001210:	e002      	b.n	8001218 <LoopFillZerobss>

08001212 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001212:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001214:	f842 3b04 	str.w	r3, [r2], #4

08001218 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800121a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800121c:	d3f9      	bcc.n	8001212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800121e:	f7ff ffd3 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f002 f9ed 	bl	8003600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff f96d 	bl	8000504 <main>
  bx  lr    
 800122a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800122c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001230:	08003698 	.word	0x08003698
  ldr  r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001238:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800123c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001240:	20000268 	.word	0x20000268

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_Init+0x40>)
 8001252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_Init+0x40>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_Init+0x40>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 fa2b 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fce2 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023c00 	.word	0x40023c00

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fa35 	bl	800171a <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f000 fa0b 	bl	80016e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000008 	.word	0x20000008
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x20>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x24>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_IncTick+0x24>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008
 8001310:	20000264 	.word	0x20000264

08001314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return uwTick;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_GetTick+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000264 	.word	0x20000264

0800132c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff ffee 	bl	8001314 <HAL_GetTick>
 8001338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d005      	beq.n	8001352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_Delay+0x40>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001352:	bf00      	nop
 8001354:	f7ff ffde 	bl	8001314 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d8f7      	bhi.n	8001354 <HAL_Delay+0x28>
  {
  }
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000008 	.word	0x20000008

08001370 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0ed      	b.n	800155e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fc80 	bl	8000c94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0202 	bic.w	r2, r2, #2
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a4:	f7ff ffb6 	bl	8001314 <HAL_GetTick>
 80013a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013aa:	e012      	b.n	80013d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013ac:	f7ff ffb2 	bl	8001314 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b0a      	cmp	r3, #10
 80013b8:	d90b      	bls.n	80013d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2205      	movs	r2, #5
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0c5      	b.n	800155e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e5      	bne.n	80013ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f0:	f7ff ff90 	bl	8001314 <HAL_GetTick>
 80013f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013f6:	e012      	b.n	800141e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013f8:	f7ff ff8c 	bl	8001314 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b0a      	cmp	r3, #10
 8001404:	d90b      	bls.n	800141e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2205      	movs	r2, #5
 8001416:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e09f      	b.n	800155e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0e5      	beq.n	80013f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7e1b      	ldrb	r3, [r3, #24]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d108      	bne.n	8001446 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e007      	b.n	8001456 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7e5b      	ldrb	r3, [r3, #25]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d108      	bne.n	8001470 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e007      	b.n	8001480 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800147e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e9b      	ldrb	r3, [r3, #26]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d108      	bne.n	800149a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0220 	orr.w	r2, r2, #32
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	e007      	b.n	80014aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0220 	bic.w	r2, r2, #32
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7edb      	ldrb	r3, [r3, #27]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d108      	bne.n	80014c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0210 	bic.w	r2, r2, #16
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e007      	b.n	80014d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0210 	orr.w	r2, r2, #16
 80014d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7f1b      	ldrb	r3, [r3, #28]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d108      	bne.n	80014ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0208 	orr.w	r2, r2, #8
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e007      	b.n	80014fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0208 	bic.w	r2, r2, #8
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7f5b      	ldrb	r3, [r3, #29]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0204 	orr.w	r2, r2, #4
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e007      	b.n	8001528 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0204 	bic.w	r2, r2, #4
 8001526:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	ea42 0103 	orr.w	r1, r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff8e 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff47 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff5c 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff8e 	bl	8001620 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5d 	bl	80015cc <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffb0 	bl	8001688 <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e16b      	b.n	8001a28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	f040 815a 	bne.w	8001a22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d00b      	beq.n	800178e <HAL_GPIO_Init+0x5a>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001782:	2b11      	cmp	r3, #17
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b12      	cmp	r3, #18
 800178c:	d130      	bne.n	80017f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 0201 	and.w	r2, r3, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0xfc>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80b4 	beq.w	8001a22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b5f      	ldr	r3, [pc, #380]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a5e      	ldr	r2, [pc, #376]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d6:	4a5a      	ldr	r2, [pc, #360]	; (8001a40 <HAL_GPIO_Init+0x30c>)
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a51      	ldr	r2, [pc, #324]	; (8001a44 <HAL_GPIO_Init+0x310>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02b      	beq.n	800195a <HAL_GPIO_Init+0x226>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a50      	ldr	r2, [pc, #320]	; (8001a48 <HAL_GPIO_Init+0x314>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x222>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <HAL_GPIO_Init+0x318>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x21e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4e      	ldr	r2, [pc, #312]	; (8001a50 <HAL_GPIO_Init+0x31c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x21a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4d      	ldr	r2, [pc, #308]	; (8001a54 <HAL_GPIO_Init+0x320>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x216>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_GPIO_Init+0x324>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x212>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4b      	ldr	r2, [pc, #300]	; (8001a5c <HAL_GPIO_Init+0x328>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4a      	ldr	r2, [pc, #296]	; (8001a60 <HAL_GPIO_Init+0x32c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x20a>
 800193a:	2307      	movs	r3, #7
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x228>
 800193e:	2308      	movs	r3, #8
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x228>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x228>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x228>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x228>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196c:	4934      	ldr	r1, [pc, #208]	; (8001a40 <HAL_GPIO_Init+0x30c>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_GPIO_Init+0x330>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800199e:	4a31      	ldr	r2, [pc, #196]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_GPIO_Init+0x330>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_GPIO_Init+0x330>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae90 	bls.w	8001750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	3724      	adds	r7, #36	; 0x24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40021400 	.word	0x40021400
 8001a5c:	40021800 	.word	0x40021800
 8001a60:	40021c00 	.word	0x40021c00
 8001a64:	40013c00 	.word	0x40013c00

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a84:	e003      	b.n	8001a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	041a      	lsls	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	619a      	str	r2, [r3, #24]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e11f      	b.n	8001cee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff f92e 	bl	8000d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2224      	movs	r2, #36	; 0x24
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b00:	f000 fd18 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 8001b04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a7b      	ldr	r2, [pc, #492]	; (8001cf8 <HAL_I2C_Init+0x25c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d807      	bhi.n	8001b20 <HAL_I2C_Init+0x84>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4a7a      	ldr	r2, [pc, #488]	; (8001cfc <HAL_I2C_Init+0x260>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	bf94      	ite	ls
 8001b18:	2301      	movls	r3, #1
 8001b1a:	2300      	movhi	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	e006      	b.n	8001b2e <HAL_I2C_Init+0x92>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_I2C_Init+0x264>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	bf94      	ite	ls
 8001b28:	2301      	movls	r3, #1
 8001b2a:	2300      	movhi	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0db      	b.n	8001cee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4a72      	ldr	r2, [pc, #456]	; (8001d04 <HAL_I2C_Init+0x268>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0c9b      	lsrs	r3, r3, #18
 8001b40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4a64      	ldr	r2, [pc, #400]	; (8001cf8 <HAL_I2C_Init+0x25c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d802      	bhi.n	8001b70 <HAL_I2C_Init+0xd4>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	e009      	b.n	8001b84 <HAL_I2C_Init+0xe8>
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	4a63      	ldr	r2, [pc, #396]	; (8001d08 <HAL_I2C_Init+0x26c>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	099b      	lsrs	r3, r3, #6
 8001b82:	3301      	adds	r3, #1
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4956      	ldr	r1, [pc, #344]	; (8001cf8 <HAL_I2C_Init+0x25c>)
 8001ba0:	428b      	cmp	r3, r1
 8001ba2:	d80d      	bhi.n	8001bc0 <HAL_I2C_Init+0x124>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1e59      	subs	r1, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	bf38      	it	cc
 8001bbc:	2304      	movcc	r3, #4
 8001bbe:	e04f      	b.n	8001c60 <HAL_I2C_Init+0x1c4>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d111      	bne.n	8001bec <HAL_I2C_Init+0x150>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e58      	subs	r0, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	e012      	b.n	8001c12 <HAL_I2C_Init+0x176>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	0099      	lsls	r1, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Init+0x17e>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e022      	b.n	8001c60 <HAL_I2C_Init+0x1c4>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10e      	bne.n	8001c40 <HAL_I2C_Init+0x1a4>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1e58      	subs	r0, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	440b      	add	r3, r1
 8001c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c3e:	e00f      	b.n	8001c60 <HAL_I2C_Init+0x1c4>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e58      	subs	r0, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	0099      	lsls	r1, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	6809      	ldr	r1, [r1, #0]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6911      	ldr	r1, [r2, #16]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68d2      	ldr	r2, [r2, #12]
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	000186a0 	.word	0x000186a0
 8001cfc:	001e847f 	.word	0x001e847f
 8001d00:	003d08ff 	.word	0x003d08ff
 8001d04:	431bde83 	.word	0x431bde83
 8001d08:	10624dd3 	.word	0x10624dd3

08001d0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e25b      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d075      	beq.n	8001e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2a:	4ba3      	ldr	r3, [pc, #652]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d00c      	beq.n	8001d50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d36:	4ba0      	ldr	r3, [pc, #640]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d112      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d42:	4b9d      	ldr	r3, [pc, #628]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d4e:	d10b      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	4b99      	ldr	r3, [pc, #612]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d05b      	beq.n	8001e14 <HAL_RCC_OscConfig+0x108>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d157      	bne.n	8001e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e236      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d106      	bne.n	8001d80 <HAL_RCC_OscConfig+0x74>
 8001d72:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a90      	ldr	r2, [pc, #576]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e01d      	b.n	8001dbc <HAL_RCC_OscConfig+0xb0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x98>
 8001d8a:	4b8b      	ldr	r3, [pc, #556]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a8a      	ldr	r2, [pc, #552]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a87      	ldr	r2, [pc, #540]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0xb0>
 8001da4:	4b84      	ldr	r3, [pc, #528]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a83      	ldr	r2, [pc, #524]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a80      	ldr	r2, [pc, #512]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d013      	beq.n	8001dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff faa6 	bl	8001314 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff faa2 	bl	8001314 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1fb      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0xc0>
 8001dea:	e014      	b.n	8001e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fa92 	bl	8001314 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fa8e 	bl	8001314 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e1e7      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	4b6c      	ldr	r3, [pc, #432]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0xe8>
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d063      	beq.n	8001eea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e22:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2e:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d11c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3a:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d116      	bne.n	8001e74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	4b5c      	ldr	r3, [pc, #368]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_RCC_OscConfig+0x152>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e1bb      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5e:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4952      	ldr	r1, [pc, #328]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	e03a      	b.n	8001eea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7c:	4b4f      	ldr	r3, [pc, #316]	; (8001fbc <HAL_RCC_OscConfig+0x2b0>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7ff fa47 	bl	8001314 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fa43 	bl	8001314 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e19c      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4940      	ldr	r1, [pc, #256]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_OscConfig+0x2b0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fa26 	bl	8001314 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fa22 	bl	8001314 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e17b      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d030      	beq.n	8001f58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d016      	beq.n	8001f2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efe:	4b30      	ldr	r3, [pc, #192]	; (8001fc0 <HAL_RCC_OscConfig+0x2b4>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff fa06 	bl	8001314 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fa02 	bl	8001314 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e15b      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x200>
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_OscConfig+0x2b4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff f9ef 	bl	8001314 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3a:	f7ff f9eb 	bl	8001314 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e144      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a0 	beq.w	80020a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	; 0x40
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d121      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_RCC_OscConfig+0x2b8>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fae:	f7ff f9b1 	bl	8001314 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	e011      	b.n	8001fda <HAL_RCC_OscConfig+0x2ce>
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	42470000 	.word	0x42470000
 8001fc0:	42470e80 	.word	0x42470e80
 8001fc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc8:	f7ff f9a4 	bl	8001314 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e0fd      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_OscConfig+0x4d4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d106      	bne.n	8001ffc <HAL_RCC_OscConfig+0x2f0>
 8001fee:	4b7d      	ldr	r3, [pc, #500]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	e01c      	b.n	8002036 <HAL_RCC_OscConfig+0x32a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d10c      	bne.n	800201e <HAL_RCC_OscConfig+0x312>
 8002004:	4b77      	ldr	r3, [pc, #476]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a76      	ldr	r2, [pc, #472]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
 8002010:	4b74      	ldr	r3, [pc, #464]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	4a73      	ldr	r2, [pc, #460]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6713      	str	r3, [r2, #112]	; 0x70
 800201c:	e00b      	b.n	8002036 <HAL_RCC_OscConfig+0x32a>
 800201e:	4b71      	ldr	r3, [pc, #452]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4a70      	ldr	r2, [pc, #448]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6713      	str	r3, [r2, #112]	; 0x70
 800202a:	4b6e      	ldr	r3, [pc, #440]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	4a6d      	ldr	r2, [pc, #436]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d015      	beq.n	800206a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff f969 	bl	8001314 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002046:	f7ff f965 	bl	8001314 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0bc      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ee      	beq.n	8002046 <HAL_RCC_OscConfig+0x33a>
 8002068:	e014      	b.n	8002094 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7ff f953 	bl	8001314 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff f94f 	bl	8001314 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0a6      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002088:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ee      	bne.n	8002072 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b52      	ldr	r3, [pc, #328]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8092 	beq.w	80021d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b0:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d05c      	beq.n	8002176 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d141      	bne.n	8002148 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff f923 	bl	8001314 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff f91f 	bl	8001314 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e078      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e4:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69da      	ldr	r2, [r3, #28]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	019b      	lsls	r3, r3, #6
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	085b      	lsrs	r3, r3, #1
 8002108:	3b01      	subs	r3, #1
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	061b      	lsls	r3, r3, #24
 8002114:	4933      	ldr	r1, [pc, #204]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211a:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff f8f8 	bl	8001314 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff f8f4 	bl	8001314 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e04d      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x41c>
 8002146:	e045      	b.n	80021d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x4dc>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7ff f8e1 	bl	8001314 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002156:	f7ff f8dd 	bl	8001314 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e036      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002168:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x44a>
 8002174:	e02e      	b.n	80021d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e029      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <HAL_RCC_OscConfig+0x4d8>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	429a      	cmp	r2, r3
 8002194:	d11c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d115      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021aa:	4013      	ands	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d106      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470060 	.word	0x42470060

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0cc      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d90c      	bls.n	8002228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d044      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d119      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e06f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e067      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4934      	ldr	r1, [pc, #208]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7ff f81a 	bl	8001314 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7ff f816 	bl	8001314 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e04f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d20c      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4601      	mov	r1, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	5cd3      	ldrb	r3, [r2, r3]
 8002386:	fa21 f303 	lsr.w	r3, r1, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe ff7a 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08003670 	.word	0x08003670
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	2300      	movs	r3, #0
 80023c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ce:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_RCC_GetSysClockFreq+0x158>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d007      	beq.n	80023ea <HAL_RCC_GetSysClockFreq+0x32>
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d008      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x38>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 808d 	bne.w	80024fe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b4b      	ldr	r3, [pc, #300]	; (8002514 <HAL_RCC_GetSysClockFreq+0x15c>)
 80023e6:	60bb      	str	r3, [r7, #8]
       break;
 80023e8:	e08c      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ea:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <HAL_RCC_GetSysClockFreq+0x160>)
 80023ec:	60bb      	str	r3, [r7, #8]
      break;
 80023ee:	e089      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f0:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_GetSysClockFreq+0x158>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fa:	4b45      	ldr	r3, [pc, #276]	; (8002510 <HAL_RCC_GetSysClockFreq+0x158>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d023      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002406:	4b42      	ldr	r3, [pc, #264]	; (8002510 <HAL_RCC_GetSysClockFreq+0x158>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	f04f 0400 	mov.w	r4, #0
 8002410:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	ea03 0501 	and.w	r5, r3, r1
 800241c:	ea04 0602 	and.w	r6, r4, r2
 8002420:	4a3d      	ldr	r2, [pc, #244]	; (8002518 <HAL_RCC_GetSysClockFreq+0x160>)
 8002422:	fb02 f106 	mul.w	r1, r2, r6
 8002426:	2200      	movs	r2, #0
 8002428:	fb02 f205 	mul.w	r2, r2, r5
 800242c:	440a      	add	r2, r1
 800242e:	493a      	ldr	r1, [pc, #232]	; (8002518 <HAL_RCC_GetSysClockFreq+0x160>)
 8002430:	fba5 0101 	umull	r0, r1, r5, r1
 8002434:	1853      	adds	r3, r2, r1
 8002436:	4619      	mov	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f04f 0400 	mov.w	r4, #0
 800243e:	461a      	mov	r2, r3
 8002440:	4623      	mov	r3, r4
 8002442:	f7fd fec1 	bl	80001c8 <__aeabi_uldivmod>
 8002446:	4603      	mov	r3, r0
 8002448:	460c      	mov	r4, r1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e049      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244e:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_RCC_GetSysClockFreq+0x158>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	099b      	lsrs	r3, r3, #6
 8002454:	f04f 0400 	mov.w	r4, #0
 8002458:	f240 11ff 	movw	r1, #511	; 0x1ff
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	ea03 0501 	and.w	r5, r3, r1
 8002464:	ea04 0602 	and.w	r6, r4, r2
 8002468:	4629      	mov	r1, r5
 800246a:	4632      	mov	r2, r6
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f04f 0400 	mov.w	r4, #0
 8002474:	0154      	lsls	r4, r2, #5
 8002476:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800247a:	014b      	lsls	r3, r1, #5
 800247c:	4619      	mov	r1, r3
 800247e:	4622      	mov	r2, r4
 8002480:	1b49      	subs	r1, r1, r5
 8002482:	eb62 0206 	sbc.w	r2, r2, r6
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f04f 0400 	mov.w	r4, #0
 800248e:	0194      	lsls	r4, r2, #6
 8002490:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002494:	018b      	lsls	r3, r1, #6
 8002496:	1a5b      	subs	r3, r3, r1
 8002498:	eb64 0402 	sbc.w	r4, r4, r2
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	00e2      	lsls	r2, r4, #3
 80024a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024aa:	00d9      	lsls	r1, r3, #3
 80024ac:	460b      	mov	r3, r1
 80024ae:	4614      	mov	r4, r2
 80024b0:	195b      	adds	r3, r3, r5
 80024b2:	eb44 0406 	adc.w	r4, r4, r6
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	02a2      	lsls	r2, r4, #10
 80024c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024c4:	0299      	lsls	r1, r3, #10
 80024c6:	460b      	mov	r3, r1
 80024c8:	4614      	mov	r4, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	4621      	mov	r1, r4
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f04f 0400 	mov.w	r4, #0
 80024d4:	461a      	mov	r2, r3
 80024d6:	4623      	mov	r3, r4
 80024d8:	f7fd fe76 	bl	80001c8 <__aeabi_uldivmod>
 80024dc:	4603      	mov	r3, r0
 80024de:	460c      	mov	r4, r1
 80024e0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_GetSysClockFreq+0x158>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	3301      	adds	r3, #1
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	60bb      	str	r3, [r7, #8]
      break;
 80024fc:	e002      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002500:	60bb      	str	r3, [r7, #8]
      break;
 8002502:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002504:	68bb      	ldr	r3, [r7, #8]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	00f42400 	.word	0x00f42400
 8002518:	017d7840 	.word	0x017d7840

0800251c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_RCC_GetHCLKFreq+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000000 	.word	0x20000000

08002534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002538:	f7ff fff0 	bl	800251c <HAL_RCC_GetHCLKFreq>
 800253c:	4601      	mov	r1, r0
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	0a9b      	lsrs	r3, r3, #10
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4a03      	ldr	r2, [pc, #12]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	08003680 	.word	0x08003680

0800255c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002560:	f7ff ffdc 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8002564:	4601      	mov	r1, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0b5b      	lsrs	r3, r3, #13
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	08003680 	.word	0x08003680

08002584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e01d      	b.n	80025d2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe fc02 	bl	8000db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3304      	adds	r3, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f000 f90e 	bl	80027e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2201      	movs	r2, #1
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fb48 	bl	8002c84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a15      	ldr	r2, [pc, #84]	; (8002650 <HAL_TIM_PWM_Start+0x74>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d004      	beq.n	8002608 <HAL_TIM_PWM_Start+0x2c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a14      	ldr	r2, [pc, #80]	; (8002654 <HAL_TIM_PWM_Start+0x78>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d101      	bne.n	800260c <HAL_TIM_PWM_Start+0x30>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_TIM_PWM_Start+0x32>
 800260c:	2300      	movs	r3, #0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d007      	beq.n	8002644 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40010000 	.word	0x40010000
 8002654:	40010400 	.word	0x40010400

08002658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800266e:	2302      	movs	r3, #2
 8002670:	e0b4      	b.n	80027dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2202      	movs	r2, #2
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0c      	cmp	r3, #12
 8002686:	f200 809f 	bhi.w	80027c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026c5 	.word	0x080026c5
 8002694:	080027c9 	.word	0x080027c9
 8002698:	080027c9 	.word	0x080027c9
 800269c:	080027c9 	.word	0x080027c9
 80026a0:	08002705 	.word	0x08002705
 80026a4:	080027c9 	.word	0x080027c9
 80026a8:	080027c9 	.word	0x080027c9
 80026ac:	080027c9 	.word	0x080027c9
 80026b0:	08002747 	.word	0x08002747
 80026b4:	080027c9 	.word	0x080027c9
 80026b8:	080027c9 	.word	0x080027c9
 80026bc:	080027c9 	.word	0x080027c9
 80026c0:	08002787 	.word	0x08002787
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f92a 	bl	8002924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0208 	orr.w	r2, r2, #8
 80026de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6999      	ldr	r1, [r3, #24]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	619a      	str	r2, [r3, #24]
      break;
 8002702:	e062      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f97a 	bl	8002a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800271e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6999      	ldr	r1, [r3, #24]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	021a      	lsls	r2, r3, #8
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	619a      	str	r2, [r3, #24]
      break;
 8002744:	e041      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f9cf 	bl	8002af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0208 	orr.w	r2, r2, #8
 8002760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0204 	bic.w	r2, r2, #4
 8002770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69d9      	ldr	r1, [r3, #28]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	61da      	str	r2, [r3, #28]
      break;
 8002784:	e021      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fa23 	bl	8002bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69d9      	ldr	r1, [r3, #28]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	021a      	lsls	r2, r3, #8
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	61da      	str	r2, [r3, #28]
      break;
 80027c6:	e000      	b.n	80027ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80027c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a40      	ldr	r2, [pc, #256]	; (80028f8 <TIM_Base_SetConfig+0x114>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d013      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002802:	d00f      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3d      	ldr	r2, [pc, #244]	; (80028fc <TIM_Base_SetConfig+0x118>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00b      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3c      	ldr	r2, [pc, #240]	; (8002900 <TIM_Base_SetConfig+0x11c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <TIM_Base_SetConfig+0x120>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <TIM_Base_SetConfig+0x40>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a3a      	ldr	r2, [pc, #232]	; (8002908 <TIM_Base_SetConfig+0x124>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d108      	bne.n	8002836 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <TIM_Base_SetConfig+0x114>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d02b      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d027      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <TIM_Base_SetConfig+0x118>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d023      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <TIM_Base_SetConfig+0x11c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01f      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <TIM_Base_SetConfig+0x120>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01b      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <TIM_Base_SetConfig+0x124>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d017      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <TIM_Base_SetConfig+0x128>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <TIM_Base_SetConfig+0x12c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00f      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a26      	ldr	r2, [pc, #152]	; (8002914 <TIM_Base_SetConfig+0x130>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00b      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a25      	ldr	r2, [pc, #148]	; (8002918 <TIM_Base_SetConfig+0x134>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a24      	ldr	r2, [pc, #144]	; (800291c <TIM_Base_SetConfig+0x138>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d003      	beq.n	8002896 <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a23      	ldr	r2, [pc, #140]	; (8002920 <TIM_Base_SetConfig+0x13c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d108      	bne.n	80028a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <TIM_Base_SetConfig+0x114>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <TIM_Base_SetConfig+0xf8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <TIM_Base_SetConfig+0x124>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d103      	bne.n	80028e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	615a      	str	r2, [r3, #20]
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40010000 	.word	0x40010000
 80028fc:	40000400 	.word	0x40000400
 8002900:	40000800 	.word	0x40000800
 8002904:	40000c00 	.word	0x40000c00
 8002908:	40010400 	.word	0x40010400
 800290c:	40014000 	.word	0x40014000
 8002910:	40014400 	.word	0x40014400
 8002914:	40014800 	.word	0x40014800
 8002918:	40001800 	.word	0x40001800
 800291c:	40001c00 	.word	0x40001c00
 8002920:	40002000 	.word	0x40002000

08002924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f023 0201 	bic.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f023 0302 	bic.w	r3, r3, #2
 800296c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a20      	ldr	r2, [pc, #128]	; (80029fc <TIM_OC1_SetConfig+0xd8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d003      	beq.n	8002988 <TIM_OC1_SetConfig+0x64>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <TIM_OC1_SetConfig+0xdc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10c      	bne.n	80029a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0308 	bic.w	r3, r3, #8
 800298e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f023 0304 	bic.w	r3, r3, #4
 80029a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a15      	ldr	r2, [pc, #84]	; (80029fc <TIM_OC1_SetConfig+0xd8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d003      	beq.n	80029b2 <TIM_OC1_SetConfig+0x8e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <TIM_OC1_SetConfig+0xdc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d111      	bne.n	80029d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	621a      	str	r2, [r3, #32]
}
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40010400 	.word	0x40010400

08002a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f023 0210 	bic.w	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0320 	bic.w	r3, r3, #32
 8002a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <TIM_OC2_SetConfig+0xe4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d003      	beq.n	8002a6c <TIM_OC2_SetConfig+0x68>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <TIM_OC2_SetConfig+0xe8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10d      	bne.n	8002a88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <TIM_OC2_SetConfig+0xe4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d003      	beq.n	8002a98 <TIM_OC2_SetConfig+0x94>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a16      	ldr	r2, [pc, #88]	; (8002aec <TIM_OC2_SetConfig+0xe8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d113      	bne.n	8002ac0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	621a      	str	r2, [r3, #32]
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40010400 	.word	0x40010400

08002af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <TIM_OC3_SetConfig+0xe0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d003      	beq.n	8002b56 <TIM_OC3_SetConfig+0x66>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <TIM_OC3_SetConfig+0xe4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10d      	bne.n	8002b72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <TIM_OC3_SetConfig+0xe0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_OC3_SetConfig+0x92>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <TIM_OC3_SetConfig+0xe4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d113      	bne.n	8002baa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	621a      	str	r2, [r3, #32]
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	031b      	lsls	r3, r3, #12
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <TIM_OC4_SetConfig+0xa4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_OC4_SetConfig+0x68>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <TIM_OC4_SetConfig+0xa8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d109      	bne.n	8002c54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	019b      	lsls	r3, r3, #6
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	621a      	str	r2, [r3, #32]
}
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40010400 	.word	0x40010400

08002c84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2201      	movs	r2, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a1a      	ldr	r2, [r3, #32]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e05a      	b.n	8002d9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a21      	ldr	r2, [pc, #132]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d01d      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d018      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1b      	ldr	r2, [pc, #108]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00e      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a18      	ldr	r2, [pc, #96]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d10c      	bne.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40000800 	.word	0x40000800
 8002db8:	40000c00 	.word	0x40000c00
 8002dbc:	40010400 	.word	0x40010400
 8002dc0:	40014000 	.word	0x40014000
 8002dc4:	40001800 	.word	0x40001800

08002dc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e03d      	b.n	8002e60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e03f      	b.n	8002efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d106      	bne.n	8002e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fe f864 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2224      	movs	r2, #36	; 0x24
 8002e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f829 	bl	8002f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f0c:	b085      	sub	sp, #20
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f4a:	f023 030c 	bic.w	r3, r3, #12
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	68f9      	ldr	r1, [r7, #12]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f76:	f040 818b 	bne.w	8003290 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4ac1      	ldr	r2, [pc, #772]	; (8003284 <UART_SetConfig+0x37c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d005      	beq.n	8002f90 <UART_SetConfig+0x88>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4abf      	ldr	r2, [pc, #764]	; (8003288 <UART_SetConfig+0x380>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	f040 80bd 	bne.w	800310a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f90:	f7ff fae4 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 8002f94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	461d      	mov	r5, r3
 8002f9a:	f04f 0600 	mov.w	r6, #0
 8002f9e:	46a8      	mov	r8, r5
 8002fa0:	46b1      	mov	r9, r6
 8002fa2:	eb18 0308 	adds.w	r3, r8, r8
 8002fa6:	eb49 0409 	adc.w	r4, r9, r9
 8002faa:	4698      	mov	r8, r3
 8002fac:	46a1      	mov	r9, r4
 8002fae:	eb18 0805 	adds.w	r8, r8, r5
 8002fb2:	eb49 0906 	adc.w	r9, r9, r6
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fca:	4688      	mov	r8, r1
 8002fcc:	4691      	mov	r9, r2
 8002fce:	eb18 0005 	adds.w	r0, r8, r5
 8002fd2:	eb49 0106 	adc.w	r1, r9, r6
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	461d      	mov	r5, r3
 8002fdc:	f04f 0600 	mov.w	r6, #0
 8002fe0:	196b      	adds	r3, r5, r5
 8002fe2:	eb46 0406 	adc.w	r4, r6, r6
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4623      	mov	r3, r4
 8002fea:	f7fd f8ed 	bl	80001c8 <__aeabi_uldivmod>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4ba5      	ldr	r3, [pc, #660]	; (800328c <UART_SetConfig+0x384>)
 8002ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	461d      	mov	r5, r3
 8003004:	f04f 0600 	mov.w	r6, #0
 8003008:	46a9      	mov	r9, r5
 800300a:	46b2      	mov	sl, r6
 800300c:	eb19 0309 	adds.w	r3, r9, r9
 8003010:	eb4a 040a 	adc.w	r4, sl, sl
 8003014:	4699      	mov	r9, r3
 8003016:	46a2      	mov	sl, r4
 8003018:	eb19 0905 	adds.w	r9, r9, r5
 800301c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800302c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003030:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003034:	4689      	mov	r9, r1
 8003036:	4692      	mov	sl, r2
 8003038:	eb19 0005 	adds.w	r0, r9, r5
 800303c:	eb4a 0106 	adc.w	r1, sl, r6
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	461d      	mov	r5, r3
 8003046:	f04f 0600 	mov.w	r6, #0
 800304a:	196b      	adds	r3, r5, r5
 800304c:	eb46 0406 	adc.w	r4, r6, r6
 8003050:	461a      	mov	r2, r3
 8003052:	4623      	mov	r3, r4
 8003054:	f7fd f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8003058:	4603      	mov	r3, r0
 800305a:	460c      	mov	r4, r1
 800305c:	461a      	mov	r2, r3
 800305e:	4b8b      	ldr	r3, [pc, #556]	; (800328c <UART_SetConfig+0x384>)
 8003060:	fba3 1302 	umull	r1, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	2164      	movs	r1, #100	; 0x64
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	3332      	adds	r3, #50	; 0x32
 8003072:	4a86      	ldr	r2, [pc, #536]	; (800328c <UART_SetConfig+0x384>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003080:	4498      	add	r8, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	461d      	mov	r5, r3
 8003086:	f04f 0600 	mov.w	r6, #0
 800308a:	46a9      	mov	r9, r5
 800308c:	46b2      	mov	sl, r6
 800308e:	eb19 0309 	adds.w	r3, r9, r9
 8003092:	eb4a 040a 	adc.w	r4, sl, sl
 8003096:	4699      	mov	r9, r3
 8003098:	46a2      	mov	sl, r4
 800309a:	eb19 0905 	adds.w	r9, r9, r5
 800309e:	eb4a 0a06 	adc.w	sl, sl, r6
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030b6:	4689      	mov	r9, r1
 80030b8:	4692      	mov	sl, r2
 80030ba:	eb19 0005 	adds.w	r0, r9, r5
 80030be:	eb4a 0106 	adc.w	r1, sl, r6
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	461d      	mov	r5, r3
 80030c8:	f04f 0600 	mov.w	r6, #0
 80030cc:	196b      	adds	r3, r5, r5
 80030ce:	eb46 0406 	adc.w	r4, r6, r6
 80030d2:	461a      	mov	r2, r3
 80030d4:	4623      	mov	r3, r4
 80030d6:	f7fd f877 	bl	80001c8 <__aeabi_uldivmod>
 80030da:	4603      	mov	r3, r0
 80030dc:	460c      	mov	r4, r1
 80030de:	461a      	mov	r2, r3
 80030e0:	4b6a      	ldr	r3, [pc, #424]	; (800328c <UART_SetConfig+0x384>)
 80030e2:	fba3 1302 	umull	r1, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2164      	movs	r1, #100	; 0x64
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	3332      	adds	r3, #50	; 0x32
 80030f4:	4a65      	ldr	r2, [pc, #404]	; (800328c <UART_SetConfig+0x384>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	f003 0207 	and.w	r2, r3, #7
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4442      	add	r2, r8
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	e26f      	b.n	80035ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800310a:	f7ff fa13 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 800310e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	461d      	mov	r5, r3
 8003114:	f04f 0600 	mov.w	r6, #0
 8003118:	46a8      	mov	r8, r5
 800311a:	46b1      	mov	r9, r6
 800311c:	eb18 0308 	adds.w	r3, r8, r8
 8003120:	eb49 0409 	adc.w	r4, r9, r9
 8003124:	4698      	mov	r8, r3
 8003126:	46a1      	mov	r9, r4
 8003128:	eb18 0805 	adds.w	r8, r8, r5
 800312c:	eb49 0906 	adc.w	r9, r9, r6
 8003130:	f04f 0100 	mov.w	r1, #0
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800313c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003140:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003144:	4688      	mov	r8, r1
 8003146:	4691      	mov	r9, r2
 8003148:	eb18 0005 	adds.w	r0, r8, r5
 800314c:	eb49 0106 	adc.w	r1, r9, r6
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	461d      	mov	r5, r3
 8003156:	f04f 0600 	mov.w	r6, #0
 800315a:	196b      	adds	r3, r5, r5
 800315c:	eb46 0406 	adc.w	r4, r6, r6
 8003160:	461a      	mov	r2, r3
 8003162:	4623      	mov	r3, r4
 8003164:	f7fd f830 	bl	80001c8 <__aeabi_uldivmod>
 8003168:	4603      	mov	r3, r0
 800316a:	460c      	mov	r4, r1
 800316c:	461a      	mov	r2, r3
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <UART_SetConfig+0x384>)
 8003170:	fba3 2302 	umull	r2, r3, r3, r2
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	461d      	mov	r5, r3
 800317e:	f04f 0600 	mov.w	r6, #0
 8003182:	46a9      	mov	r9, r5
 8003184:	46b2      	mov	sl, r6
 8003186:	eb19 0309 	adds.w	r3, r9, r9
 800318a:	eb4a 040a 	adc.w	r4, sl, sl
 800318e:	4699      	mov	r9, r3
 8003190:	46a2      	mov	sl, r4
 8003192:	eb19 0905 	adds.w	r9, r9, r5
 8003196:	eb4a 0a06 	adc.w	sl, sl, r6
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ae:	4689      	mov	r9, r1
 80031b0:	4692      	mov	sl, r2
 80031b2:	eb19 0005 	adds.w	r0, r9, r5
 80031b6:	eb4a 0106 	adc.w	r1, sl, r6
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	461d      	mov	r5, r3
 80031c0:	f04f 0600 	mov.w	r6, #0
 80031c4:	196b      	adds	r3, r5, r5
 80031c6:	eb46 0406 	adc.w	r4, r6, r6
 80031ca:	461a      	mov	r2, r3
 80031cc:	4623      	mov	r3, r4
 80031ce:	f7fc fffb 	bl	80001c8 <__aeabi_uldivmod>
 80031d2:	4603      	mov	r3, r0
 80031d4:	460c      	mov	r4, r1
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <UART_SetConfig+0x384>)
 80031da:	fba3 1302 	umull	r1, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2164      	movs	r1, #100	; 0x64
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	3332      	adds	r3, #50	; 0x32
 80031ec:	4a27      	ldr	r2, [pc, #156]	; (800328c <UART_SetConfig+0x384>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031fa:	4498      	add	r8, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	461d      	mov	r5, r3
 8003200:	f04f 0600 	mov.w	r6, #0
 8003204:	46a9      	mov	r9, r5
 8003206:	46b2      	mov	sl, r6
 8003208:	eb19 0309 	adds.w	r3, r9, r9
 800320c:	eb4a 040a 	adc.w	r4, sl, sl
 8003210:	4699      	mov	r9, r3
 8003212:	46a2      	mov	sl, r4
 8003214:	eb19 0905 	adds.w	r9, r9, r5
 8003218:	eb4a 0a06 	adc.w	sl, sl, r6
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003228:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800322c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003230:	4689      	mov	r9, r1
 8003232:	4692      	mov	sl, r2
 8003234:	eb19 0005 	adds.w	r0, r9, r5
 8003238:	eb4a 0106 	adc.w	r1, sl, r6
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	461d      	mov	r5, r3
 8003242:	f04f 0600 	mov.w	r6, #0
 8003246:	196b      	adds	r3, r5, r5
 8003248:	eb46 0406 	adc.w	r4, r6, r6
 800324c:	461a      	mov	r2, r3
 800324e:	4623      	mov	r3, r4
 8003250:	f7fc ffba 	bl	80001c8 <__aeabi_uldivmod>
 8003254:	4603      	mov	r3, r0
 8003256:	460c      	mov	r4, r1
 8003258:	461a      	mov	r2, r3
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <UART_SetConfig+0x384>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <UART_SetConfig+0x384>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 0207 	and.w	r2, r3, #7
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4442      	add	r2, r8
 8003280:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003282:	e1b2      	b.n	80035ea <UART_SetConfig+0x6e2>
 8003284:	40011000 	.word	0x40011000
 8003288:	40011400 	.word	0x40011400
 800328c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4ad7      	ldr	r2, [pc, #860]	; (80035f4 <UART_SetConfig+0x6ec>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d005      	beq.n	80032a6 <UART_SetConfig+0x39e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4ad6      	ldr	r2, [pc, #856]	; (80035f8 <UART_SetConfig+0x6f0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	f040 80d1 	bne.w	8003448 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032a6:	f7ff f959 	bl	800255c <HAL_RCC_GetPCLK2Freq>
 80032aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	469a      	mov	sl, r3
 80032b0:	f04f 0b00 	mov.w	fp, #0
 80032b4:	46d0      	mov	r8, sl
 80032b6:	46d9      	mov	r9, fp
 80032b8:	eb18 0308 	adds.w	r3, r8, r8
 80032bc:	eb49 0409 	adc.w	r4, r9, r9
 80032c0:	4698      	mov	r8, r3
 80032c2:	46a1      	mov	r9, r4
 80032c4:	eb18 080a 	adds.w	r8, r8, sl
 80032c8:	eb49 090b 	adc.w	r9, r9, fp
 80032cc:	f04f 0100 	mov.w	r1, #0
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032e0:	4688      	mov	r8, r1
 80032e2:	4691      	mov	r9, r2
 80032e4:	eb1a 0508 	adds.w	r5, sl, r8
 80032e8:	eb4b 0609 	adc.w	r6, fp, r9
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	f04f 0400 	mov.w	r4, #0
 80032fe:	0094      	lsls	r4, r2, #2
 8003300:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003304:	008b      	lsls	r3, r1, #2
 8003306:	461a      	mov	r2, r3
 8003308:	4623      	mov	r3, r4
 800330a:	4628      	mov	r0, r5
 800330c:	4631      	mov	r1, r6
 800330e:	f7fc ff5b 	bl	80001c8 <__aeabi_uldivmod>
 8003312:	4603      	mov	r3, r0
 8003314:	460c      	mov	r4, r1
 8003316:	461a      	mov	r2, r3
 8003318:	4bb8      	ldr	r3, [pc, #736]	; (80035fc <UART_SetConfig+0x6f4>)
 800331a:	fba3 2302 	umull	r2, r3, r3, r2
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	469b      	mov	fp, r3
 8003328:	f04f 0c00 	mov.w	ip, #0
 800332c:	46d9      	mov	r9, fp
 800332e:	46e2      	mov	sl, ip
 8003330:	eb19 0309 	adds.w	r3, r9, r9
 8003334:	eb4a 040a 	adc.w	r4, sl, sl
 8003338:	4699      	mov	r9, r3
 800333a:	46a2      	mov	sl, r4
 800333c:	eb19 090b 	adds.w	r9, r9, fp
 8003340:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003344:	f04f 0100 	mov.w	r1, #0
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003350:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003354:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003358:	4689      	mov	r9, r1
 800335a:	4692      	mov	sl, r2
 800335c:	eb1b 0509 	adds.w	r5, fp, r9
 8003360:	eb4c 060a 	adc.w	r6, ip, sl
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4619      	mov	r1, r3
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	f04f 0400 	mov.w	r4, #0
 8003376:	0094      	lsls	r4, r2, #2
 8003378:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800337c:	008b      	lsls	r3, r1, #2
 800337e:	461a      	mov	r2, r3
 8003380:	4623      	mov	r3, r4
 8003382:	4628      	mov	r0, r5
 8003384:	4631      	mov	r1, r6
 8003386:	f7fc ff1f 	bl	80001c8 <__aeabi_uldivmod>
 800338a:	4603      	mov	r3, r0
 800338c:	460c      	mov	r4, r1
 800338e:	461a      	mov	r2, r3
 8003390:	4b9a      	ldr	r3, [pc, #616]	; (80035fc <UART_SetConfig+0x6f4>)
 8003392:	fba3 1302 	umull	r1, r3, r3, r2
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2164      	movs	r1, #100	; 0x64
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	3332      	adds	r3, #50	; 0x32
 80033a4:	4a95      	ldr	r2, [pc, #596]	; (80035fc <UART_SetConfig+0x6f4>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b0:	4498      	add	r8, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	469b      	mov	fp, r3
 80033b6:	f04f 0c00 	mov.w	ip, #0
 80033ba:	46d9      	mov	r9, fp
 80033bc:	46e2      	mov	sl, ip
 80033be:	eb19 0309 	adds.w	r3, r9, r9
 80033c2:	eb4a 040a 	adc.w	r4, sl, sl
 80033c6:	4699      	mov	r9, r3
 80033c8:	46a2      	mov	sl, r4
 80033ca:	eb19 090b 	adds.w	r9, r9, fp
 80033ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033e6:	4689      	mov	r9, r1
 80033e8:	4692      	mov	sl, r2
 80033ea:	eb1b 0509 	adds.w	r5, fp, r9
 80033ee:	eb4c 060a 	adc.w	r6, ip, sl
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4619      	mov	r1, r3
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	f04f 0400 	mov.w	r4, #0
 8003404:	0094      	lsls	r4, r2, #2
 8003406:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800340a:	008b      	lsls	r3, r1, #2
 800340c:	461a      	mov	r2, r3
 800340e:	4623      	mov	r3, r4
 8003410:	4628      	mov	r0, r5
 8003412:	4631      	mov	r1, r6
 8003414:	f7fc fed8 	bl	80001c8 <__aeabi_uldivmod>
 8003418:	4603      	mov	r3, r0
 800341a:	460c      	mov	r4, r1
 800341c:	461a      	mov	r2, r3
 800341e:	4b77      	ldr	r3, [pc, #476]	; (80035fc <UART_SetConfig+0x6f4>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a72      	ldr	r2, [pc, #456]	; (80035fc <UART_SetConfig+0x6f4>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 020f 	and.w	r2, r3, #15
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4442      	add	r2, r8
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	e0d0      	b.n	80035ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003448:	f7ff f874 	bl	8002534 <HAL_RCC_GetPCLK1Freq>
 800344c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	469a      	mov	sl, r3
 8003452:	f04f 0b00 	mov.w	fp, #0
 8003456:	46d0      	mov	r8, sl
 8003458:	46d9      	mov	r9, fp
 800345a:	eb18 0308 	adds.w	r3, r8, r8
 800345e:	eb49 0409 	adc.w	r4, r9, r9
 8003462:	4698      	mov	r8, r3
 8003464:	46a1      	mov	r9, r4
 8003466:	eb18 080a 	adds.w	r8, r8, sl
 800346a:	eb49 090b 	adc.w	r9, r9, fp
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800347a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800347e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003482:	4688      	mov	r8, r1
 8003484:	4691      	mov	r9, r2
 8003486:	eb1a 0508 	adds.w	r5, sl, r8
 800348a:	eb4b 0609 	adc.w	r6, fp, r9
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4619      	mov	r1, r3
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	f04f 0400 	mov.w	r4, #0
 80034a0:	0094      	lsls	r4, r2, #2
 80034a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034a6:	008b      	lsls	r3, r1, #2
 80034a8:	461a      	mov	r2, r3
 80034aa:	4623      	mov	r3, r4
 80034ac:	4628      	mov	r0, r5
 80034ae:	4631      	mov	r1, r6
 80034b0:	f7fc fe8a 	bl	80001c8 <__aeabi_uldivmod>
 80034b4:	4603      	mov	r3, r0
 80034b6:	460c      	mov	r4, r1
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b50      	ldr	r3, [pc, #320]	; (80035fc <UART_SetConfig+0x6f4>)
 80034bc:	fba3 2302 	umull	r2, r3, r3, r2
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	469b      	mov	fp, r3
 80034ca:	f04f 0c00 	mov.w	ip, #0
 80034ce:	46d9      	mov	r9, fp
 80034d0:	46e2      	mov	sl, ip
 80034d2:	eb19 0309 	adds.w	r3, r9, r9
 80034d6:	eb4a 040a 	adc.w	r4, sl, sl
 80034da:	4699      	mov	r9, r3
 80034dc:	46a2      	mov	sl, r4
 80034de:	eb19 090b 	adds.w	r9, r9, fp
 80034e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034fa:	4689      	mov	r9, r1
 80034fc:	4692      	mov	sl, r2
 80034fe:	eb1b 0509 	adds.w	r5, fp, r9
 8003502:	eb4c 060a 	adc.w	r6, ip, sl
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4619      	mov	r1, r3
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	f04f 0400 	mov.w	r4, #0
 8003518:	0094      	lsls	r4, r2, #2
 800351a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800351e:	008b      	lsls	r3, r1, #2
 8003520:	461a      	mov	r2, r3
 8003522:	4623      	mov	r3, r4
 8003524:	4628      	mov	r0, r5
 8003526:	4631      	mov	r1, r6
 8003528:	f7fc fe4e 	bl	80001c8 <__aeabi_uldivmod>
 800352c:	4603      	mov	r3, r0
 800352e:	460c      	mov	r4, r1
 8003530:	461a      	mov	r2, r3
 8003532:	4b32      	ldr	r3, [pc, #200]	; (80035fc <UART_SetConfig+0x6f4>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	3332      	adds	r3, #50	; 0x32
 8003546:	4a2d      	ldr	r2, [pc, #180]	; (80035fc <UART_SetConfig+0x6f4>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003552:	4498      	add	r8, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	469b      	mov	fp, r3
 8003558:	f04f 0c00 	mov.w	ip, #0
 800355c:	46d9      	mov	r9, fp
 800355e:	46e2      	mov	sl, ip
 8003560:	eb19 0309 	adds.w	r3, r9, r9
 8003564:	eb4a 040a 	adc.w	r4, sl, sl
 8003568:	4699      	mov	r9, r3
 800356a:	46a2      	mov	sl, r4
 800356c:	eb19 090b 	adds.w	r9, r9, fp
 8003570:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003580:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003584:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003588:	4689      	mov	r9, r1
 800358a:	4692      	mov	sl, r2
 800358c:	eb1b 0509 	adds.w	r5, fp, r9
 8003590:	eb4c 060a 	adc.w	r6, ip, sl
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4619      	mov	r1, r3
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	f04f 0400 	mov.w	r4, #0
 80035a6:	0094      	lsls	r4, r2, #2
 80035a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035ac:	008b      	lsls	r3, r1, #2
 80035ae:	461a      	mov	r2, r3
 80035b0:	4623      	mov	r3, r4
 80035b2:	4628      	mov	r0, r5
 80035b4:	4631      	mov	r1, r6
 80035b6:	f7fc fe07 	bl	80001c8 <__aeabi_uldivmod>
 80035ba:	4603      	mov	r3, r0
 80035bc:	460c      	mov	r4, r1
 80035be:	461a      	mov	r2, r3
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <UART_SetConfig+0x6f4>)
 80035c2:	fba3 1302 	umull	r1, r3, r3, r2
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2164      	movs	r1, #100	; 0x64
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	3332      	adds	r3, #50	; 0x32
 80035d4:	4a09      	ldr	r2, [pc, #36]	; (80035fc <UART_SetConfig+0x6f4>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4442      	add	r2, r8
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	e7ff      	b.n	80035ea <UART_SetConfig+0x6e2>
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f4:	40011000 	.word	0x40011000
 80035f8:	40011400 	.word	0x40011400
 80035fc:	51eb851f 	.word	0x51eb851f

08003600 <__libc_init_array>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	4e0d      	ldr	r6, [pc, #52]	; (8003638 <__libc_init_array+0x38>)
 8003604:	4c0d      	ldr	r4, [pc, #52]	; (800363c <__libc_init_array+0x3c>)
 8003606:	1ba4      	subs	r4, r4, r6
 8003608:	10a4      	asrs	r4, r4, #2
 800360a:	2500      	movs	r5, #0
 800360c:	42a5      	cmp	r5, r4
 800360e:	d109      	bne.n	8003624 <__libc_init_array+0x24>
 8003610:	4e0b      	ldr	r6, [pc, #44]	; (8003640 <__libc_init_array+0x40>)
 8003612:	4c0c      	ldr	r4, [pc, #48]	; (8003644 <__libc_init_array+0x44>)
 8003614:	f000 f820 	bl	8003658 <_init>
 8003618:	1ba4      	subs	r4, r4, r6
 800361a:	10a4      	asrs	r4, r4, #2
 800361c:	2500      	movs	r5, #0
 800361e:	42a5      	cmp	r5, r4
 8003620:	d105      	bne.n	800362e <__libc_init_array+0x2e>
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003628:	4798      	blx	r3
 800362a:	3501      	adds	r5, #1
 800362c:	e7ee      	b.n	800360c <__libc_init_array+0xc>
 800362e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003632:	4798      	blx	r3
 8003634:	3501      	adds	r5, #1
 8003636:	e7f2      	b.n	800361e <__libc_init_array+0x1e>
 8003638:	08003690 	.word	0x08003690
 800363c:	08003690 	.word	0x08003690
 8003640:	08003690 	.word	0x08003690
 8003644:	08003694 	.word	0x08003694

08003648 <memset>:
 8003648:	4402      	add	r2, r0
 800364a:	4603      	mov	r3, r0
 800364c:	4293      	cmp	r3, r2
 800364e:	d100      	bne.n	8003652 <memset+0xa>
 8003650:	4770      	bx	lr
 8003652:	f803 1b01 	strb.w	r1, [r3], #1
 8003656:	e7f9      	b.n	800364c <memset+0x4>

08003658 <_init>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr

08003664 <_fini>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr
