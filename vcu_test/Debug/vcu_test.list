
vcu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800367c  0800367c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003684  08003684  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800368c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  08003698  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003698  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df46  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ad8  00000000  00000000  0002df82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  0002fa60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  00030988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fa2f  00000000  00000000  00031800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a8b0  00000000  00000000  0005122f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3bad  00000000  00000000  0005badf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f68c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a0  00000000  00000000  0011f708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800364c 	.word	0x0800364c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800364c 	.word	0x0800364c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <servo_angle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void servo_angle(int angle)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if(angle<0)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	da01      	bge.n	80004da <servo_angle+0x12>
		angle = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
	if(angle>180)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2bb4      	cmp	r3, #180	; 0xb4
 80004de:	dd01      	ble.n	80004e4 <servo_angle+0x1c>
		angle = 180;
 80004e0:	23b4      	movs	r3, #180	; 0xb4
 80004e2:	607b      	str	r3, [r7, #4]
	angle = angle +45;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	332d      	adds	r3, #45	; 0x2d
 80004e8:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, angle);
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <servo_angle+0x38>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	200000fc 	.word	0x200000fc

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fe97 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f839 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 faf9 	bl	8000b08 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000516:	f000 f901 	bl	800071c <MX_TIM1_Init>
  MX_TIM8_Init();
 800051a:	f000 f983 	bl	8000824 <MX_TIM8_Init>
  MX_TIM12_Init();
 800051e:	f000 fa05 	bl	800092c <MX_TIM12_Init>
  MX_CAN1_Init();
 8000522:	f000 f899 	bl	8000658 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000526:	f000 f8cb 	bl	80006c0 <MX_I2C1_Init>
  MX_UART4_Init();
 800052a:	f000 fa45 	bl	80009b8 <MX_UART4_Init>
  MX_UART5_Init();
 800052e:	f000 fa6d 	bl	8000a0c <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000532:	f000 fa95 	bl	8000a60 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000536:	f000 fabd 	bl	8000ab4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800053a:	2100      	movs	r1, #0
 800053c:	4810      	ldr	r0, [pc, #64]	; (8000580 <main+0x7c>)
 800053e:	f002 f847 	bl	80025d0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(int i = 0; i<=180;i++)
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	e008      	b.n	800055a <main+0x56>
	  	  {
	  		  servo_angle(i);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f7ff ffbd 	bl	80004c8 <servo_angle>
	  		  HAL_Delay(10);
 800054e:	200a      	movs	r0, #10
 8000550:	f000 fee6 	bl	8001320 <HAL_Delay>
	  for(int i = 0; i<=180;i++)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3301      	adds	r3, #1
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2bb4      	cmp	r3, #180	; 0xb4
 800055e:	ddf3      	ble.n	8000548 <main+0x44>
	  	  }
	  	  servo_angle(0);
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff ffb1 	bl	80004c8 <servo_angle>
	  	  HAL_Delay(1000);
 8000566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800056a:	f000 fed9 	bl	8001320 <HAL_Delay>
	  	  servo_angle(100);
 800056e:	2064      	movs	r0, #100	; 0x64
 8000570:	f7ff ffaa 	bl	80004c8 <servo_angle>
	  	  HAL_Delay(2000);
 8000574:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000578:	f000 fed2 	bl	8001320 <HAL_Delay>
	  for(int i = 0; i<=180;i++)
 800057c:	e7e1      	b.n	8000542 <main+0x3e>
 800057e:	bf00      	nop
 8000580:	200000fc 	.word	0x200000fc

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f852 	bl	800363c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	; (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f8:	23a8      	movs	r3, #168	; 0xa8
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fb79 	bl	8001d00 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 fb08 	bl	8000c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2105      	movs	r1, #5
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fdd2 	bl	80021e0 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 faf1 	bl	8000c28 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_CAN1_Init+0x60>)
 800065e:	4a17      	ldr	r2, [pc, #92]	; (80006bc <MX_CAN1_Init+0x64>)
 8000660:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000664:	2210      	movs	r2, #16
 8000666:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_CAN1_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000674:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_CAN1_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_CAN1_Init+0x60>)
 800068e:	2200      	movs	r2, #0
 8000690:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_CAN1_Init+0x60>)
 8000694:	2200      	movs	r2, #0
 8000696:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_CAN1_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_CAN1_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_CAN1_Init+0x60>)
 80006a6:	f000 fe5d 	bl	8001364 <HAL_CAN_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80006b0:	f000 faba 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	200001fc 	.word	0x200001fc
 80006bc:	40006400 	.word	0x40006400

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C1_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <MX_I2C1_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C1_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MX_I2C1_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_I2C1_Init+0x50>)
 80006de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_I2C1_Init+0x50>)
 80006fe:	f001 f9c7 	bl	8001a90 <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 fa8e 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000068 	.word	0x20000068
 8000714:	40005400 	.word	0x40005400
 8000718:	000186a0 	.word	0x000186a0

0800071c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b092      	sub	sp, #72	; 0x48
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f002 ff78 	bl	800363c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074c:	4b33      	ldr	r3, [pc, #204]	; (800081c <MX_TIM1_Init+0x100>)
 800074e:	4a34      	ldr	r2, [pc, #208]	; (8000820 <MX_TIM1_Init+0x104>)
 8000750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 355;
 8000752:	4b32      	ldr	r3, [pc, #200]	; (800081c <MX_TIM1_Init+0x100>)
 8000754:	f240 1263 	movw	r2, #355	; 0x163
 8000758:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075a:	4b30      	ldr	r3, [pc, #192]	; (800081c <MX_TIM1_Init+0x100>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4718;
 8000760:	4b2e      	ldr	r3, [pc, #184]	; (800081c <MX_TIM1_Init+0x100>)
 8000762:	f241 226e 	movw	r2, #4718	; 0x126e
 8000766:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000768:	4b2c      	ldr	r3, [pc, #176]	; (800081c <MX_TIM1_Init+0x100>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_TIM1_Init+0x100>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <MX_TIM1_Init+0x100>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800077a:	4828      	ldr	r0, [pc, #160]	; (800081c <MX_TIM1_Init+0x100>)
 800077c:	f001 fefc 	bl	8002578 <HAL_TIM_PWM_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 fa4f 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000792:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000796:	4619      	mov	r1, r3
 8000798:	4820      	ldr	r0, [pc, #128]	; (800081c <MX_TIM1_Init+0x100>)
 800079a:	f002 fa93 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80007a4:	f000 fa40 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a8:	2360      	movs	r3, #96	; 0x60
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007b4:	2300      	movs	r3, #0
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	2200      	movs	r2, #0
 80007ca:	4619      	mov	r1, r3
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <MX_TIM1_Init+0x100>)
 80007ce:	f001 ff3d 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80007d8:	f000 fa26 	bl	8000c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4807      	ldr	r0, [pc, #28]	; (800081c <MX_TIM1_Init+0x100>)
 8000800:	f002 fadc 	bl	8002dbc <HAL_TIMEx_ConfigBreakDeadTime>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800080a:	f000 fa0d 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <MX_TIM1_Init+0x100>)
 8000810:	f000 fb18 	bl	8000e44 <HAL_TIM_MspPostInit>

}
 8000814:	bf00      	nop
 8000816:	3748      	adds	r7, #72	; 0x48
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000fc 	.word	0x200000fc
 8000820:	40010000 	.word	0x40010000

08000824 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b092      	sub	sp, #72	; 0x48
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
 8000844:	615a      	str	r2, [r3, #20]
 8000846:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2220      	movs	r2, #32
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fef4 	bl	800363c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <MX_TIM8_Init+0x100>)
 8000856:	4a34      	ldr	r2, [pc, #208]	; (8000928 <MX_TIM8_Init+0x104>)
 8000858:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <MX_TIM8_Init+0x100>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b30      	ldr	r3, [pc, #192]	; (8000924 <MX_TIM8_Init+0x100>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <MX_TIM8_Init+0x100>)
 8000868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800086c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_TIM8_Init+0x100>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <MX_TIM8_Init+0x100>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_TIM8_Init+0x100>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000880:	4828      	ldr	r0, [pc, #160]	; (8000924 <MX_TIM8_Init+0x100>)
 8000882:	f001 fe79 	bl	8002578 <HAL_TIM_PWM_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800088c:	f000 f9cc 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000898:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800089c:	4619      	mov	r1, r3
 800089e:	4821      	ldr	r0, [pc, #132]	; (8000924 <MX_TIM8_Init+0x100>)
 80008a0:	f002 fa10 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80008aa:	f000 f9bd 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ae:	2360      	movs	r3, #96	; 0x60
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ba:	2300      	movs	r3, #0
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	2208      	movs	r2, #8
 80008d0:	4619      	mov	r1, r3
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <MX_TIM8_Init+0x100>)
 80008d4:	f001 feba 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80008de:	f000 f9a3 	bl	8000c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	4619      	mov	r1, r3
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <MX_TIM8_Init+0x100>)
 8000906:	f002 fa59 	bl	8002dbc <HAL_TIMEx_ConfigBreakDeadTime>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000910:	f000 f98a 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <MX_TIM8_Init+0x100>)
 8000916:	f000 fa95 	bl	8000e44 <HAL_TIM_MspPostInit>

}
 800091a:	bf00      	nop
 800091c:	3748      	adds	r7, #72	; 0x48
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000028 	.word	0x20000028
 8000928:	40010400 	.word	0x40010400

0800092c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
 8000940:	615a      	str	r2, [r3, #20]
 8000942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_TIM12_Init+0x84>)
 8000946:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <MX_TIM12_Init+0x88>)
 8000948:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_TIM12_Init+0x84>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_TIM12_Init+0x84>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_TIM12_Init+0x84>)
 8000958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_TIM12_Init+0x84>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_TIM12_Init+0x84>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800096a:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_TIM12_Init+0x84>)
 800096c:	f001 fe04 	bl	8002578 <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000976:	f000 f957 	bl	8000c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097a:	2360      	movs	r3, #96	; 0x60
 800097c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_TIM12_Init+0x84>)
 8000992:	f001 fe5b 	bl	800264c <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800099c:	f000 f944 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_TIM12_Init+0x84>)
 80009a2:	f000 fa4f 	bl	8000e44 <HAL_TIM_MspPostInit>

}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000224 	.word	0x20000224
 80009b4:	40001800 	.word	0x40001800

080009b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_UART4_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_UART4_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_UART4_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_UART4_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_UART4_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_UART4_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_UART4_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_UART4_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_UART4_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_UART4_Init+0x4c>)
 80009f0:	f002 fa36 	bl	8002e60 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f915 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000017c 	.word	0x2000017c
 8000a08:	40004c00 	.word	0x40004c00

08000a0c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_UART5_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_UART5_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_UART5_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_UART5_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_UART5_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_UART5_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_UART5_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_UART5_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_UART5_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_UART5_Init+0x4c>)
 8000a44:	f002 fa0c 	bl	8002e60 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f000 f8eb 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000bc 	.word	0x200000bc
 8000a5c:	40005000 	.word	0x40005000

08000a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_USART2_UART_Init+0x50>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_USART2_UART_Init+0x4c>)
 8000a98:	f002 f9e2 	bl	8002e60 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aa2:	f000 f8c1 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200001bc 	.word	0x200001bc
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_USART6_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART6_UART_Init+0x4c>)
 8000aec:	f002 f9b8 	bl	8002e60 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f000 f897 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000013c 	.word	0x2000013c
 8000b04:	40011400 	.word	0x40011400

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b3e      	ldr	r3, [pc, #248]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a3d      	ldr	r2, [pc, #244]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b3b      	ldr	r3, [pc, #236]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a36      	ldr	r2, [pc, #216]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b34      	ldr	r3, [pc, #208]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a28      	ldr	r2, [pc, #160]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_O1_Pin|RELAY2_O_Pin|RELAY1_O_Pin|GPIO_O5_Pin
 8000baa:	2200      	movs	r2, #0
 8000bac:	f644 4106 	movw	r1, #19462	; 0x4c06
 8000bb0:	481b      	ldr	r0, [pc, #108]	; (8000c20 <MX_GPIO_Init+0x118>)
 8000bb2:	f000 ff53 	bl	8001a5c <HAL_GPIO_WritePin>
                          |GPIO_O4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_O3_Pin|GPIO_O2_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2130      	movs	r1, #48	; 0x30
 8000bba:	481a      	ldr	r0, [pc, #104]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000bbc:	f000 ff4e 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_O1_Pin RELAY2_O_Pin RELAY1_O_Pin GPIO_O5_Pin
                           GPIO_O4_Pin */
  GPIO_InitStruct.Pin = GPIO_O1_Pin|RELAY2_O_Pin|RELAY1_O_Pin|GPIO_O5_Pin
 8000bc0:	f644 4306 	movw	r3, #19462	; 0x4c06
 8000bc4:	617b      	str	r3, [r7, #20]
                          |GPIO_O4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4811      	ldr	r0, [pc, #68]	; (8000c20 <MX_GPIO_Init+0x118>)
 8000bda:	f000 fda5 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000bde:	2301      	movs	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <MX_GPIO_Init+0x118>)
 8000bf2:	f000 fd99 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_O3_Pin GPIO_O2_Pin */
  GPIO_InitStruct.Pin = GPIO_O3_Pin|GPIO_O2_Pin;
 8000bf6:	2330      	movs	r3, #48	; 0x30
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000c0e:	f000 fd8b 	bl	8001728 <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020800 	.word	0x40020800
 8000c24:	40020400 	.word	0x40020400

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_CAN_MspInit+0x84>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12c      	bne.n	8000d04 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_CAN_MspInit+0x88>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_CAN_MspInit+0x88>)
 8000cb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_CAN_MspInit+0x88>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_CAN_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_CAN_MspInit+0x88>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_CAN_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ce2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cf4:	2309      	movs	r3, #9
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_CAN_MspInit+0x8c>)
 8000d00:	f000 fd12 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40006400 	.word	0x40006400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400

08000d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_I2C_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12b      	bne.n	8000d92 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d56:	23c0      	movs	r3, #192	; 0xc0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d66:	2304      	movs	r3, #4
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <HAL_I2C_MspInit+0x8c>)
 8000d72:	f000 fcd9 	bl	8001728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400

08000da8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <HAL_TIM_PWM_MspInit+0x8c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10e      	bne.n	8000dd8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <HAL_TIM_PWM_MspInit+0x90>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <HAL_TIM_PWM_MspInit+0x90>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_TIM_PWM_MspInit+0x90>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000dd6:	e026      	b.n	8000e26 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_TIM_PWM_MspInit+0x94>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10e      	bne.n	8000e00 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_TIM_PWM_MspInit+0x90>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_TIM_PWM_MspInit+0x90>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_TIM_PWM_MspInit+0x90>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
}
 8000dfe:	e012      	b.n	8000e26 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_TIM_PWM_MspInit+0x98>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d10d      	bne.n	8000e26 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_TIM_PWM_MspInit+0x90>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <HAL_TIM_PWM_MspInit+0x90>)
 8000e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_TIM_PWM_MspInit+0x90>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	bf00      	nop
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40010000 	.word	0x40010000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40010400 	.word	0x40010400
 8000e40:	40001800 	.word	0x40001800

08000e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a37      	ldr	r2, [pc, #220]	; (8000f40 <HAL_TIM_MspPostInit+0xfc>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d11f      	bne.n	8000ea6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <HAL_TIM_MspPostInit+0x100>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a35      	ldr	r2, [pc, #212]	; (8000f44 <HAL_TIM_MspPostInit+0x100>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <HAL_TIM_MspPostInit+0x100>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482a      	ldr	r0, [pc, #168]	; (8000f48 <HAL_TIM_MspPostInit+0x104>)
 8000ea0:	f000 fc42 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000ea4:	e048      	b.n	8000f38 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM8)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <HAL_TIM_MspPostInit+0x108>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d11f      	bne.n	8000ef0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <HAL_TIM_MspPostInit+0x100>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a22      	ldr	r2, [pc, #136]	; (8000f44 <HAL_TIM_MspPostInit+0x100>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <HAL_TIM_MspPostInit+0x100>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ecc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4817      	ldr	r0, [pc, #92]	; (8000f48 <HAL_TIM_MspPostInit+0x104>)
 8000eea:	f000 fc1d 	bl	8001728 <HAL_GPIO_Init>
}
 8000eee:	e023      	b.n	8000f38 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM12)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a16      	ldr	r2, [pc, #88]	; (8000f50 <HAL_TIM_MspPostInit+0x10c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d11e      	bne.n	8000f38 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_TIM_MspPostInit+0x100>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_TIM_MspPostInit+0x100>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_TIM_MspPostInit+0x100>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f28:	2309      	movs	r3, #9
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_TIM_MspPostInit+0x104>)
 8000f34:	f000 fbf8 	bl	8001728 <HAL_GPIO_Init>
}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40010000 	.word	0x40010000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40010400 	.word	0x40010400
 8000f50:	40001800 	.word	0x40001800

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b090      	sub	sp, #64	; 0x40
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a73      	ldr	r2, [pc, #460]	; (8001140 <HAL_UART_MspInit+0x1ec>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d12c      	bne.n	8000fd0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f7a:	4b72      	ldr	r3, [pc, #456]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a71      	ldr	r2, [pc, #452]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f90:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
 8000f96:	4b6b      	ldr	r3, [pc, #428]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a6a      	ldr	r2, [pc, #424]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b68      	ldr	r3, [pc, #416]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XBEE_TX_UA4_Pin|XBEE_RX_UA4_Pin;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	485f      	ldr	r0, [pc, #380]	; (8001148 <HAL_UART_MspInit+0x1f4>)
 8000fca:	f000 fbad 	bl	8001728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fce:	e0b3      	b.n	8001138 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==UART5)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a5d      	ldr	r2, [pc, #372]	; (800114c <HAL_UART_MspInit+0x1f8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d14b      	bne.n	8001072 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
 8000fde:	4b59      	ldr	r3, [pc, #356]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a58      	ldr	r2, [pc, #352]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b56      	ldr	r3, [pc, #344]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	623b      	str	r3, [r7, #32]
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	4b52      	ldr	r3, [pc, #328]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a51      	ldr	r2, [pc, #324]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	61fb      	str	r3, [r7, #28]
 8001010:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	4b4b      	ldr	r3, [pc, #300]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a4a      	ldr	r2, [pc, #296]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b48      	ldr	r3, [pc, #288]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800102e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001040:	2308      	movs	r3, #8
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001048:	4619      	mov	r1, r3
 800104a:	4841      	ldr	r0, [pc, #260]	; (8001150 <HAL_UART_MspInit+0x1fc>)
 800104c:	f000 fb6c 	bl	8001728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001050:	2304      	movs	r3, #4
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001060:	2308      	movs	r3, #8
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001068:	4619      	mov	r1, r3
 800106a:	483a      	ldr	r0, [pc, #232]	; (8001154 <HAL_UART_MspInit+0x200>)
 800106c:	f000 fb5c 	bl	8001728 <HAL_GPIO_Init>
}
 8001070:	e062      	b.n	8001138 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a38      	ldr	r2, [pc, #224]	; (8001158 <HAL_UART_MspInit+0x204>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d12c      	bne.n	80010d6 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART2_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	4b30      	ldr	r3, [pc, #192]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8001086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TTL__TX_UA2_Pin|TTL_RX_UA2_Pin;
 80010b4:	230c      	movs	r3, #12
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010c4:	2307      	movs	r3, #7
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010cc:	4619      	mov	r1, r3
 80010ce:	481e      	ldr	r0, [pc, #120]	; (8001148 <HAL_UART_MspInit+0x1f4>)
 80010d0:	f000 fb2a 	bl	8001728 <HAL_GPIO_Init>
}
 80010d4:	e030      	b.n	8001138 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART6)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a20      	ldr	r2, [pc, #128]	; (800115c <HAL_UART_MspInit+0x208>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d12b      	bne.n	8001138 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	4a16      	ldr	r2, [pc, #88]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 80010ea:	f043 0320 	orr.w	r3, r3, #32
 80010ee:	6453      	str	r3, [r2, #68]	; 0x44
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_UART_MspInit+0x1f0>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001128:	2308      	movs	r3, #8
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	4619      	mov	r1, r3
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <HAL_UART_MspInit+0x1fc>)
 8001134:	f000 faf8 	bl	8001728 <HAL_GPIO_Init>
}
 8001138:	bf00      	nop
 800113a:	3740      	adds	r7, #64	; 0x40
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40004c00 	.word	0x40004c00
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	40005000 	.word	0x40005000
 8001150:	40020800 	.word	0x40020800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40004400 	.word	0x40004400
 800115c:	40011400 	.word	0x40011400

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f894 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <SystemInit+0x28>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <SystemInit+0x28>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SystemInit+0x28>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
#endif
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001220 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011ee:	e003      	b.n	80011f8 <LoopCopyDataInit>

080011f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011f6:	3104      	adds	r1, #4

080011f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001200:	d3f6      	bcc.n	80011f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001204:	e002      	b.n	800120c <LoopFillZerobss>

08001206 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001206:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001208:	f842 3b04 	str.w	r3, [r2], #4

0800120c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800120e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001210:	d3f9      	bcc.n	8001206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001212:	f7ff ffd3 	bl	80011bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f002 f9ed 	bl	80035f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff f973 	bl	8000504 <main>
  bx  lr    
 800121e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001220:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001224:	0800368c 	.word	0x0800368c
  ldr  r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800122c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001230:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001234:	20000268 	.word	0x20000268

08001238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_Init+0x40>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_Init+0x40>)
 8001252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_Init+0x40>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 fa2b 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff fce2 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fa35 	bl	800170e <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 fa0b 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008
 8001304:	20000264 	.word	0x20000264

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000264 	.word	0x20000264

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_Delay+0x40>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000008 	.word	0x20000008

08001364 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0ed      	b.n	8001552 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fc80 	bl	8000c88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0202 	bic.w	r2, r2, #2
 8001396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001398:	f7ff ffb6 	bl	8001308 <HAL_GetTick>
 800139c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800139e:	e012      	b.n	80013c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013a0:	f7ff ffb2 	bl	8001308 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b0a      	cmp	r3, #10
 80013ac:	d90b      	bls.n	80013c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2205      	movs	r2, #5
 80013be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0c5      	b.n	8001552 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e5      	bne.n	80013a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e4:	f7ff ff90 	bl	8001308 <HAL_GetTick>
 80013e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ea:	e012      	b.n	8001412 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013ec:	f7ff ff8c 	bl	8001308 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b0a      	cmp	r3, #10
 80013f8:	d90b      	bls.n	8001412 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2205      	movs	r2, #5
 800140a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e09f      	b.n	8001552 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0e5      	beq.n	80013ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e1b      	ldrb	r3, [r3, #24]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d108      	bne.n	800143a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	e007      	b.n	800144a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7e5b      	ldrb	r3, [r3, #25]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d108      	bne.n	8001464 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e007      	b.n	8001474 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001472:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7e9b      	ldrb	r3, [r3, #26]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d108      	bne.n	800148e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0220 	orr.w	r2, r2, #32
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e007      	b.n	800149e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0220 	bic.w	r2, r2, #32
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7edb      	ldrb	r3, [r3, #27]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d108      	bne.n	80014b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0210 	bic.w	r2, r2, #16
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	e007      	b.n	80014c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0210 	orr.w	r2, r2, #16
 80014c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7f1b      	ldrb	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d108      	bne.n	80014e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0208 	orr.w	r2, r2, #8
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e007      	b.n	80014f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0208 	bic.w	r2, r2, #8
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	7f5b      	ldrb	r3, [r3, #29]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d108      	bne.n	800150c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 0204 	orr.w	r2, r2, #4
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e007      	b.n	800151c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0204 	bic.w	r2, r2, #4
 800151a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	ea42 0103 	orr.w	r1, r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	1e5a      	subs	r2, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff47 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff5c 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff8e 	bl	8001614 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffb0 	bl	800167c <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	e16b      	b.n	8001a1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 815a 	bne.w	8001a16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d00b      	beq.n	8001782 <HAL_GPIO_Init+0x5a>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001776:	2b11      	cmp	r3, #17
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b12      	cmp	r3, #18
 8001780:	d130      	bne.n	80017e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0xfc>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b12      	cmp	r3, #18
 8001822:	d123      	bne.n	800186c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80b4 	beq.w	8001a16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <HAL_GPIO_Init+0x308>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <HAL_GPIO_Init+0x308>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <HAL_GPIO_Init+0x308>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ca:	4a5a      	ldr	r2, [pc, #360]	; (8001a34 <HAL_GPIO_Init+0x30c>)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_GPIO_Init+0x310>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d02b      	beq.n	800194e <HAL_GPIO_Init+0x226>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a50      	ldr	r2, [pc, #320]	; (8001a3c <HAL_GPIO_Init+0x314>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d025      	beq.n	800194a <HAL_GPIO_Init+0x222>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4f      	ldr	r2, [pc, #316]	; (8001a40 <HAL_GPIO_Init+0x318>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d01f      	beq.n	8001946 <HAL_GPIO_Init+0x21e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4e      	ldr	r2, [pc, #312]	; (8001a44 <HAL_GPIO_Init+0x31c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d019      	beq.n	8001942 <HAL_GPIO_Init+0x21a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_GPIO_Init+0x320>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0x216>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4c      	ldr	r2, [pc, #304]	; (8001a4c <HAL_GPIO_Init+0x324>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00d      	beq.n	800193a <HAL_GPIO_Init+0x212>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4b      	ldr	r2, [pc, #300]	; (8001a50 <HAL_GPIO_Init+0x328>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x20e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_GPIO_Init+0x32c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_GPIO_Init+0x20a>
 800192e:	2307      	movs	r3, #7
 8001930:	e00e      	b.n	8001950 <HAL_GPIO_Init+0x228>
 8001932:	2308      	movs	r3, #8
 8001934:	e00c      	b.n	8001950 <HAL_GPIO_Init+0x228>
 8001936:	2306      	movs	r3, #6
 8001938:	e00a      	b.n	8001950 <HAL_GPIO_Init+0x228>
 800193a:	2305      	movs	r3, #5
 800193c:	e008      	b.n	8001950 <HAL_GPIO_Init+0x228>
 800193e:	2304      	movs	r3, #4
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x228>
 8001942:	2303      	movs	r3, #3
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x228>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x228>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x228>
 800194e:	2300      	movs	r3, #0
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f002 0203 	and.w	r2, r2, #3
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001960:	4934      	ldr	r1, [pc, #208]	; (8001a34 <HAL_GPIO_Init+0x30c>)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196e:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <HAL_GPIO_Init+0x330>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001992:	4a31      	ldr	r2, [pc, #196]	; (8001a58 <HAL_GPIO_Init+0x330>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <HAL_GPIO_Init+0x330>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019bc:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_GPIO_Init+0x330>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_GPIO_Init+0x330>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b0f      	cmp	r3, #15
 8001a20:	f67f ae90 	bls.w	8001744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a24:	bf00      	nop
 8001a26:	3724      	adds	r7, #36	; 0x24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40021400 	.word	0x40021400
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40021c00 	.word	0x40021c00
 8001a58:	40013c00 	.word	0x40013c00

08001a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a78:	e003      	b.n	8001a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	041a      	lsls	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	619a      	str	r2, [r3, #24]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e11f      	b.n	8001ce2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff f92e 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001af4:	f000 fd18 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8001af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a7b      	ldr	r2, [pc, #492]	; (8001cec <HAL_I2C_Init+0x25c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d807      	bhi.n	8001b14 <HAL_I2C_Init+0x84>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a7a      	ldr	r2, [pc, #488]	; (8001cf0 <HAL_I2C_Init+0x260>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e006      	b.n	8001b22 <HAL_I2C_Init+0x92>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a77      	ldr	r2, [pc, #476]	; (8001cf4 <HAL_I2C_Init+0x264>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	bf94      	ite	ls
 8001b1c:	2301      	movls	r3, #1
 8001b1e:	2300      	movhi	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0db      	b.n	8001ce2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_I2C_Init+0x268>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9b      	lsrs	r3, r3, #18
 8001b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a64      	ldr	r2, [pc, #400]	; (8001cec <HAL_I2C_Init+0x25c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d802      	bhi.n	8001b64 <HAL_I2C_Init+0xd4>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3301      	adds	r3, #1
 8001b62:	e009      	b.n	8001b78 <HAL_I2C_Init+0xe8>
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	4a63      	ldr	r2, [pc, #396]	; (8001cfc <HAL_I2C_Init+0x26c>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	099b      	lsrs	r3, r3, #6
 8001b76:	3301      	adds	r3, #1
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4956      	ldr	r1, [pc, #344]	; (8001cec <HAL_I2C_Init+0x25c>)
 8001b94:	428b      	cmp	r3, r1
 8001b96:	d80d      	bhi.n	8001bb4 <HAL_I2C_Init+0x124>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1e59      	subs	r1, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	bf38      	it	cc
 8001bb0:	2304      	movcc	r3, #4
 8001bb2:	e04f      	b.n	8001c54 <HAL_I2C_Init+0x1c4>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d111      	bne.n	8001be0 <HAL_I2C_Init+0x150>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	440b      	add	r3, r1
 8001bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e012      	b.n	8001c06 <HAL_I2C_Init+0x176>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1e58      	subs	r0, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	0099      	lsls	r1, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_I2C_Init+0x17e>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e022      	b.n	8001c54 <HAL_I2C_Init+0x1c4>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10e      	bne.n	8001c34 <HAL_I2C_Init+0x1a4>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1e58      	subs	r0, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	440b      	add	r3, r1
 8001c24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c32:	e00f      	b.n	8001c54 <HAL_I2C_Init+0x1c4>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1e58      	subs	r0, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	0099      	lsls	r1, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	6809      	ldr	r1, [r1, #0]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6911      	ldr	r1, [r2, #16]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68d2      	ldr	r2, [r2, #12]
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	000186a0 	.word	0x000186a0
 8001cf0:	001e847f 	.word	0x001e847f
 8001cf4:	003d08ff 	.word	0x003d08ff
 8001cf8:	431bde83 	.word	0x431bde83
 8001cfc:	10624dd3 	.word	0x10624dd3

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e25b      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d075      	beq.n	8001e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1e:	4ba3      	ldr	r3, [pc, #652]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d00c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2a:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d112      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d36:	4b9d      	ldr	r3, [pc, #628]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d42:	d10b      	bne.n	8001d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4b99      	ldr	r3, [pc, #612]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d05b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x108>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d157      	bne.n	8001e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e236      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d106      	bne.n	8001d74 <HAL_RCC_OscConfig+0x74>
 8001d66:	4b91      	ldr	r3, [pc, #580]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a90      	ldr	r2, [pc, #576]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e01d      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x98>
 8001d7e:	4b8b      	ldr	r3, [pc, #556]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a8a      	ldr	r2, [pc, #552]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a87      	ldr	r2, [pc, #540]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0xb0>
 8001d98:	4b84      	ldr	r3, [pc, #528]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a83      	ldr	r2, [pc, #524]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b81      	ldr	r3, [pc, #516]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a80      	ldr	r2, [pc, #512]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff faa6 	bl	8001308 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff faa2 	bl	8001308 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1fb      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0xc0>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fa92 	bl	8001308 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fa8e 	bl	8001308 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1e7      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfa:	4b6c      	ldr	r3, [pc, #432]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0xe8>
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d063      	beq.n	8001ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e16:	4b65      	ldr	r3, [pc, #404]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e22:	4b62      	ldr	r3, [pc, #392]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d11c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2e:	4b5f      	ldr	r3, [pc, #380]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e1bb      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4b56      	ldr	r3, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4952      	ldr	r1, [pc, #328]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e66:	e03a      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d020      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e70:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_RCC_OscConfig+0x2b0>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e76:	f7ff fa47 	bl	8001308 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7e:	f7ff fa43 	bl	8001308 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e19c      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b43      	ldr	r3, [pc, #268]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4940      	ldr	r1, [pc, #256]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_RCC_OscConfig+0x2b0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fa26 	bl	8001308 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7ff fa22 	bl	8001308 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e17b      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d030      	beq.n	8001f4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d016      	beq.n	8001f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef2:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_RCC_OscConfig+0x2b4>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff fa06 	bl	8001308 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f00:	f7ff fa02 	bl	8001308 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e15b      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x200>
 8001f1e:	e015      	b.n	8001f4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f20:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <HAL_RCC_OscConfig+0x2b4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff f9ef 	bl	8001308 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2e:	f7ff f9eb 	bl	8001308 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e144      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a0 	beq.w	800209a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_RCC_OscConfig+0x2b8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d121      	bne.n	8001fda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <HAL_RCC_OscConfig+0x2b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <HAL_RCC_OscConfig+0x2b8>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff f9b1 	bl	8001308 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e011      	b.n	8001fce <HAL_RCC_OscConfig+0x2ce>
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	42470000 	.word	0x42470000
 8001fb4:	42470e80 	.word	0x42470e80
 8001fb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbc:	f7ff f9a4 	bl	8001308 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0fd      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	4b81      	ldr	r3, [pc, #516]	; (80021d4 <HAL_RCC_OscConfig+0x4d4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d106      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x2f0>
 8001fe2:	4b7d      	ldr	r3, [pc, #500]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a7c      	ldr	r2, [pc, #496]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
 8001fee:	e01c      	b.n	800202a <HAL_RCC_OscConfig+0x32a>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_OscConfig+0x312>
 8001ff8:	4b77      	ldr	r3, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a76      	ldr	r2, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	4b74      	ldr	r3, [pc, #464]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a73      	ldr	r2, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
 8002010:	e00b      	b.n	800202a <HAL_RCC_OscConfig+0x32a>
 8002012:	4b71      	ldr	r3, [pc, #452]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a70      	ldr	r2, [pc, #448]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
 800201e:	4b6e      	ldr	r3, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4a6d      	ldr	r2, [pc, #436]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d015      	beq.n	800205e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7ff f969 	bl	8001308 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff f965 	bl	8001308 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0bc      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ee      	beq.n	800203a <HAL_RCC_OscConfig+0x33a>
 800205c:	e014      	b.n	8002088 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7ff f953 	bl	8001308 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff f94f 	bl	8001308 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0a6      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207c:	4b56      	ldr	r3, [pc, #344]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ee      	bne.n	8002066 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208e:	4b52      	ldr	r3, [pc, #328]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a51      	ldr	r2, [pc, #324]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8092 	beq.w	80021c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d05c      	beq.n	800216a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d141      	bne.n	800213c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b8:	4b48      	ldr	r3, [pc, #288]	; (80021dc <HAL_RCC_OscConfig+0x4dc>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff f923 	bl	8001308 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff f91f 	bl	8001308 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e078      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d8:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	019b      	lsls	r3, r3, #6
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	3b01      	subs	r3, #1
 80020fe:	041b      	lsls	r3, r3, #16
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	061b      	lsls	r3, r3, #24
 8002108:	4933      	ldr	r1, [pc, #204]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210e:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_RCC_OscConfig+0x4dc>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff f8f8 	bl	8001308 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff f8f4 	bl	8001308 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e04d      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x41c>
 800213a:	e045      	b.n	80021c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <HAL_RCC_OscConfig+0x4dc>)
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7ff f8e1 	bl	8001308 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214a:	f7ff f8dd 	bl	8001308 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e036      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x44a>
 8002168:	e02e      	b.n	80021c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e029      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_RCC_OscConfig+0x4d8>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	429a      	cmp	r2, r3
 8002188:	d11c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d115      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800219e:	4013      	ands	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d10d      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d106      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40007000 	.word	0x40007000
 80021d8:	40023800 	.word	0x40023800
 80021dc:	42470060 	.word	0x42470060

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0cc      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d90c      	bls.n	800221c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0b8      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4b59      	ldr	r3, [pc, #356]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a58      	ldr	r2, [pc, #352]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	494d      	ldr	r1, [pc, #308]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d044      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d119      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e07f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	2b03      	cmp	r3, #3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e067      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4934      	ldr	r1, [pc, #208]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7ff f81a 	bl	8001308 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7ff f816 	bl	8001308 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e04f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d20c      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e032      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4916      	ldr	r1, [pc, #88]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	490e      	ldr	r1, [pc, #56]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002366:	f000 f821 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	fa21 f303 	lsr.w	r3, r1, r3
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe ff7a 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00
 800239c:	40023800 	.word	0x40023800
 80023a0:	08003664 	.word	0x08003664
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	2300      	movs	r3, #0
 80023bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c2:	4b50      	ldr	r3, [pc, #320]	; (8002504 <HAL_RCC_GetSysClockFreq+0x158>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d007      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x32>
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d008      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x38>
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 808d 	bne.w	80024f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <HAL_RCC_GetSysClockFreq+0x15c>)
 80023da:	60bb      	str	r3, [r7, #8]
       break;
 80023dc:	e08c      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023de:	4b4b      	ldr	r3, [pc, #300]	; (800250c <HAL_RCC_GetSysClockFreq+0x160>)
 80023e0:	60bb      	str	r3, [r7, #8]
      break;
 80023e2:	e089      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e4:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_RCC_GetSysClockFreq+0x158>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ee:	4b45      	ldr	r3, [pc, #276]	; (8002504 <HAL_RCC_GetSysClockFreq+0x158>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d023      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fa:	4b42      	ldr	r3, [pc, #264]	; (8002504 <HAL_RCC_GetSysClockFreq+0x158>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	099b      	lsrs	r3, r3, #6
 8002400:	f04f 0400 	mov.w	r4, #0
 8002404:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	ea03 0501 	and.w	r5, r3, r1
 8002410:	ea04 0602 	and.w	r6, r4, r2
 8002414:	4a3d      	ldr	r2, [pc, #244]	; (800250c <HAL_RCC_GetSysClockFreq+0x160>)
 8002416:	fb02 f106 	mul.w	r1, r2, r6
 800241a:	2200      	movs	r2, #0
 800241c:	fb02 f205 	mul.w	r2, r2, r5
 8002420:	440a      	add	r2, r1
 8002422:	493a      	ldr	r1, [pc, #232]	; (800250c <HAL_RCC_GetSysClockFreq+0x160>)
 8002424:	fba5 0101 	umull	r0, r1, r5, r1
 8002428:	1853      	adds	r3, r2, r1
 800242a:	4619      	mov	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f04f 0400 	mov.w	r4, #0
 8002432:	461a      	mov	r2, r3
 8002434:	4623      	mov	r3, r4
 8002436:	f7fd fec7 	bl	80001c8 <__aeabi_uldivmod>
 800243a:	4603      	mov	r3, r0
 800243c:	460c      	mov	r4, r1
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	e049      	b.n	80024d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002442:	4b30      	ldr	r3, [pc, #192]	; (8002504 <HAL_RCC_GetSysClockFreq+0x158>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	099b      	lsrs	r3, r3, #6
 8002448:	f04f 0400 	mov.w	r4, #0
 800244c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	ea03 0501 	and.w	r5, r3, r1
 8002458:	ea04 0602 	and.w	r6, r4, r2
 800245c:	4629      	mov	r1, r5
 800245e:	4632      	mov	r2, r6
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	f04f 0400 	mov.w	r4, #0
 8002468:	0154      	lsls	r4, r2, #5
 800246a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800246e:	014b      	lsls	r3, r1, #5
 8002470:	4619      	mov	r1, r3
 8002472:	4622      	mov	r2, r4
 8002474:	1b49      	subs	r1, r1, r5
 8002476:	eb62 0206 	sbc.w	r2, r2, r6
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	f04f 0400 	mov.w	r4, #0
 8002482:	0194      	lsls	r4, r2, #6
 8002484:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002488:	018b      	lsls	r3, r1, #6
 800248a:	1a5b      	subs	r3, r3, r1
 800248c:	eb64 0402 	sbc.w	r4, r4, r2
 8002490:	f04f 0100 	mov.w	r1, #0
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	00e2      	lsls	r2, r4, #3
 800249a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800249e:	00d9      	lsls	r1, r3, #3
 80024a0:	460b      	mov	r3, r1
 80024a2:	4614      	mov	r4, r2
 80024a4:	195b      	adds	r3, r3, r5
 80024a6:	eb44 0406 	adc.w	r4, r4, r6
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	02a2      	lsls	r2, r4, #10
 80024b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024b8:	0299      	lsls	r1, r3, #10
 80024ba:	460b      	mov	r3, r1
 80024bc:	4614      	mov	r4, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	4621      	mov	r1, r4
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f04f 0400 	mov.w	r4, #0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4623      	mov	r3, r4
 80024cc:	f7fd fe7c 	bl	80001c8 <__aeabi_uldivmod>
 80024d0:	4603      	mov	r3, r0
 80024d2:	460c      	mov	r4, r1
 80024d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_RCC_GetSysClockFreq+0x158>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	3301      	adds	r3, #1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	60bb      	str	r3, [r7, #8]
      break;
 80024f0:	e002      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetSysClockFreq+0x15c>)
 80024f4:	60bb      	str	r3, [r7, #8]
      break;
 80024f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f8:	68bb      	ldr	r3, [r7, #8]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	00f42400 	.word	0x00f42400
 800250c:	017d7840 	.word	0x017d7840

08002510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_RCC_GetHCLKFreq+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800252c:	f7ff fff0 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002530:	4601      	mov	r1, r0
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0a9b      	lsrs	r3, r3, #10
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4a03      	ldr	r2, [pc, #12]	; (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	08003674 	.word	0x08003674

08002550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002554:	f7ff ffdc 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002558:	4601      	mov	r1, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0b5b      	lsrs	r3, r3, #13
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4a03      	ldr	r2, [pc, #12]	; (8002574 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40023800 	.word	0x40023800
 8002574:	08003674 	.word	0x08003674

08002578 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e01d      	b.n	80025c6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fc02 	bl	8000da8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f000 f90e 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	6839      	ldr	r1, [r7, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fb48 	bl	8002c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a15      	ldr	r2, [pc, #84]	; (8002644 <HAL_TIM_PWM_Start+0x74>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_TIM_PWM_Start+0x2c>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a14      	ldr	r2, [pc, #80]	; (8002648 <HAL_TIM_PWM_Start+0x78>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_TIM_PWM_Start+0x30>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_TIM_PWM_Start+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d007      	beq.n	8002638 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002662:	2302      	movs	r3, #2
 8002664:	e0b4      	b.n	80027d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	f200 809f 	bhi.w	80027bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026b9 	.word	0x080026b9
 8002688:	080027bd 	.word	0x080027bd
 800268c:	080027bd 	.word	0x080027bd
 8002690:	080027bd 	.word	0x080027bd
 8002694:	080026f9 	.word	0x080026f9
 8002698:	080027bd 	.word	0x080027bd
 800269c:	080027bd 	.word	0x080027bd
 80026a0:	080027bd 	.word	0x080027bd
 80026a4:	0800273b 	.word	0x0800273b
 80026a8:	080027bd 	.word	0x080027bd
 80026ac:	080027bd 	.word	0x080027bd
 80026b0:	080027bd 	.word	0x080027bd
 80026b4:	0800277b 	.word	0x0800277b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f92a 	bl	8002918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6999      	ldr	r1, [r3, #24]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
      break;
 80026f6:	e062      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f97a 	bl	80029f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6999      	ldr	r1, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	021a      	lsls	r2, r3, #8
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	619a      	str	r2, [r3, #24]
      break;
 8002738:	e041      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f9cf 	bl	8002ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0208 	orr.w	r2, r2, #8
 8002754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0204 	bic.w	r2, r2, #4
 8002764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69d9      	ldr	r1, [r3, #28]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
      break;
 8002778:	e021      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fa23 	bl	8002bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69d9      	ldr	r1, [r3, #28]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	021a      	lsls	r2, r3, #8
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	61da      	str	r2, [r3, #28]
      break;
 80027ba:	e000      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80027bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a40      	ldr	r2, [pc, #256]	; (80028ec <TIM_Base_SetConfig+0x114>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d013      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f6:	d00f      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3d      	ldr	r2, [pc, #244]	; (80028f0 <TIM_Base_SetConfig+0x118>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00b      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3c      	ldr	r2, [pc, #240]	; (80028f4 <TIM_Base_SetConfig+0x11c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d007      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3b      	ldr	r2, [pc, #236]	; (80028f8 <TIM_Base_SetConfig+0x120>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <TIM_Base_SetConfig+0x124>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d108      	bne.n	800282a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a2f      	ldr	r2, [pc, #188]	; (80028ec <TIM_Base_SetConfig+0x114>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02b      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d027      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a2c      	ldr	r2, [pc, #176]	; (80028f0 <TIM_Base_SetConfig+0x118>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d023      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <TIM_Base_SetConfig+0x11c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <TIM_Base_SetConfig+0x120>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01b      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a29      	ldr	r2, [pc, #164]	; (80028fc <TIM_Base_SetConfig+0x124>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d017      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <TIM_Base_SetConfig+0x128>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <TIM_Base_SetConfig+0x12c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00f      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <TIM_Base_SetConfig+0x130>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00b      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a25      	ldr	r2, [pc, #148]	; (800290c <TIM_Base_SetConfig+0x134>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a24      	ldr	r2, [pc, #144]	; (8002910 <TIM_Base_SetConfig+0x138>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d003      	beq.n	800288a <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a23      	ldr	r2, [pc, #140]	; (8002914 <TIM_Base_SetConfig+0x13c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d108      	bne.n	800289c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <TIM_Base_SetConfig+0x114>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_Base_SetConfig+0xf8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <TIM_Base_SetConfig+0x124>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d103      	bne.n	80028d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	615a      	str	r2, [r3, #20]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800
 80028f8:	40000c00 	.word	0x40000c00
 80028fc:	40010400 	.word	0x40010400
 8002900:	40014000 	.word	0x40014000
 8002904:	40014400 	.word	0x40014400
 8002908:	40014800 	.word	0x40014800
 800290c:	40001800 	.word	0x40001800
 8002910:	40001c00 	.word	0x40001c00
 8002914:	40002000 	.word	0x40002000

08002918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f023 0302 	bic.w	r3, r3, #2
 8002960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <TIM_OC1_SetConfig+0xd8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_OC1_SetConfig+0x64>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <TIM_OC1_SetConfig+0xdc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d10c      	bne.n	8002996 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 0308 	bic.w	r3, r3, #8
 8002982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <TIM_OC1_SetConfig+0xd8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <TIM_OC1_SetConfig+0x8e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <TIM_OC1_SetConfig+0xdc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d111      	bne.n	80029ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	621a      	str	r2, [r3, #32]
}
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40010400 	.word	0x40010400

080029f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f023 0210 	bic.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f023 0320 	bic.w	r3, r3, #32
 8002a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a22      	ldr	r2, [pc, #136]	; (8002adc <TIM_OC2_SetConfig+0xe4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d003      	beq.n	8002a60 <TIM_OC2_SetConfig+0x68>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a21      	ldr	r2, [pc, #132]	; (8002ae0 <TIM_OC2_SetConfig+0xe8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10d      	bne.n	8002a7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <TIM_OC2_SetConfig+0xe4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d003      	beq.n	8002a8c <TIM_OC2_SetConfig+0x94>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <TIM_OC2_SetConfig+0xe8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d113      	bne.n	8002ab4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40010400 	.word	0x40010400

08002ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <TIM_OC3_SetConfig+0xe0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_OC3_SetConfig+0x66>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <TIM_OC3_SetConfig+0xe4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10d      	bne.n	8002b66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <TIM_OC3_SetConfig+0xe0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_OC3_SetConfig+0x92>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <TIM_OC3_SetConfig+0xe4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d113      	bne.n	8002b9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	621a      	str	r2, [r3, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40010400 	.word	0x40010400

08002bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	031b      	lsls	r3, r3, #12
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <TIM_OC4_SetConfig+0xa4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_OC4_SetConfig+0x68>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <TIM_OC4_SetConfig+0xa8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d109      	bne.n	8002c48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	019b      	lsls	r3, r3, #6
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40010400 	.word	0x40010400

08002c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a1a      	ldr	r2, [r3, #32]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e05a      	b.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d01d      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d018      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00e      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a18      	ldr	r2, [pc, #96]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10c      	bne.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00
 8002db0:	40010400 	.word	0x40010400
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40001800 	.word	0x40001800

08002dbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e03d      	b.n	8002e54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e03f      	b.n	8002ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe f864 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2224      	movs	r2, #36	; 0x24
 8002e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f829 	bl	8002efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f3e:	f023 030c 	bic.w	r3, r3, #12
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	68f9      	ldr	r1, [r7, #12]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6a:	f040 818b 	bne.w	8003284 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4ac1      	ldr	r2, [pc, #772]	; (8003278 <UART_SetConfig+0x37c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d005      	beq.n	8002f84 <UART_SetConfig+0x88>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4abf      	ldr	r2, [pc, #764]	; (800327c <UART_SetConfig+0x380>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	f040 80bd 	bne.w	80030fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff fae4 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8002f88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	461d      	mov	r5, r3
 8002f8e:	f04f 0600 	mov.w	r6, #0
 8002f92:	46a8      	mov	r8, r5
 8002f94:	46b1      	mov	r9, r6
 8002f96:	eb18 0308 	adds.w	r3, r8, r8
 8002f9a:	eb49 0409 	adc.w	r4, r9, r9
 8002f9e:	4698      	mov	r8, r3
 8002fa0:	46a1      	mov	r9, r4
 8002fa2:	eb18 0805 	adds.w	r8, r8, r5
 8002fa6:	eb49 0906 	adc.w	r9, r9, r6
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fbe:	4688      	mov	r8, r1
 8002fc0:	4691      	mov	r9, r2
 8002fc2:	eb18 0005 	adds.w	r0, r8, r5
 8002fc6:	eb49 0106 	adc.w	r1, r9, r6
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	461d      	mov	r5, r3
 8002fd0:	f04f 0600 	mov.w	r6, #0
 8002fd4:	196b      	adds	r3, r5, r5
 8002fd6:	eb46 0406 	adc.w	r4, r6, r6
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4623      	mov	r3, r4
 8002fde:	f7fd f8f3 	bl	80001c8 <__aeabi_uldivmod>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4ba5      	ldr	r3, [pc, #660]	; (8003280 <UART_SetConfig+0x384>)
 8002fea:	fba3 2302 	umull	r2, r3, r3, r2
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	f04f 0600 	mov.w	r6, #0
 8002ffc:	46a9      	mov	r9, r5
 8002ffe:	46b2      	mov	sl, r6
 8003000:	eb19 0309 	adds.w	r3, r9, r9
 8003004:	eb4a 040a 	adc.w	r4, sl, sl
 8003008:	4699      	mov	r9, r3
 800300a:	46a2      	mov	sl, r4
 800300c:	eb19 0905 	adds.w	r9, r9, r5
 8003010:	eb4a 0a06 	adc.w	sl, sl, r6
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003020:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003024:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003028:	4689      	mov	r9, r1
 800302a:	4692      	mov	sl, r2
 800302c:	eb19 0005 	adds.w	r0, r9, r5
 8003030:	eb4a 0106 	adc.w	r1, sl, r6
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	461d      	mov	r5, r3
 800303a:	f04f 0600 	mov.w	r6, #0
 800303e:	196b      	adds	r3, r5, r5
 8003040:	eb46 0406 	adc.w	r4, r6, r6
 8003044:	461a      	mov	r2, r3
 8003046:	4623      	mov	r3, r4
 8003048:	f7fd f8be 	bl	80001c8 <__aeabi_uldivmod>
 800304c:	4603      	mov	r3, r0
 800304e:	460c      	mov	r4, r1
 8003050:	461a      	mov	r2, r3
 8003052:	4b8b      	ldr	r3, [pc, #556]	; (8003280 <UART_SetConfig+0x384>)
 8003054:	fba3 1302 	umull	r1, r3, r3, r2
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	2164      	movs	r1, #100	; 0x64
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	3332      	adds	r3, #50	; 0x32
 8003066:	4a86      	ldr	r2, [pc, #536]	; (8003280 <UART_SetConfig+0x384>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003074:	4498      	add	r8, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	461d      	mov	r5, r3
 800307a:	f04f 0600 	mov.w	r6, #0
 800307e:	46a9      	mov	r9, r5
 8003080:	46b2      	mov	sl, r6
 8003082:	eb19 0309 	adds.w	r3, r9, r9
 8003086:	eb4a 040a 	adc.w	r4, sl, sl
 800308a:	4699      	mov	r9, r3
 800308c:	46a2      	mov	sl, r4
 800308e:	eb19 0905 	adds.w	r9, r9, r5
 8003092:	eb4a 0a06 	adc.w	sl, sl, r6
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030aa:	4689      	mov	r9, r1
 80030ac:	4692      	mov	sl, r2
 80030ae:	eb19 0005 	adds.w	r0, r9, r5
 80030b2:	eb4a 0106 	adc.w	r1, sl, r6
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	461d      	mov	r5, r3
 80030bc:	f04f 0600 	mov.w	r6, #0
 80030c0:	196b      	adds	r3, r5, r5
 80030c2:	eb46 0406 	adc.w	r4, r6, r6
 80030c6:	461a      	mov	r2, r3
 80030c8:	4623      	mov	r3, r4
 80030ca:	f7fd f87d 	bl	80001c8 <__aeabi_uldivmod>
 80030ce:	4603      	mov	r3, r0
 80030d0:	460c      	mov	r4, r1
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <UART_SetConfig+0x384>)
 80030d6:	fba3 1302 	umull	r1, r3, r3, r2
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2164      	movs	r1, #100	; 0x64
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	3332      	adds	r3, #50	; 0x32
 80030e8:	4a65      	ldr	r2, [pc, #404]	; (8003280 <UART_SetConfig+0x384>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 0207 	and.w	r2, r3, #7
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4442      	add	r2, r8
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	e26f      	b.n	80035de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030fe:	f7ff fa13 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8003102:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	461d      	mov	r5, r3
 8003108:	f04f 0600 	mov.w	r6, #0
 800310c:	46a8      	mov	r8, r5
 800310e:	46b1      	mov	r9, r6
 8003110:	eb18 0308 	adds.w	r3, r8, r8
 8003114:	eb49 0409 	adc.w	r4, r9, r9
 8003118:	4698      	mov	r8, r3
 800311a:	46a1      	mov	r9, r4
 800311c:	eb18 0805 	adds.w	r8, r8, r5
 8003120:	eb49 0906 	adc.w	r9, r9, r6
 8003124:	f04f 0100 	mov.w	r1, #0
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003130:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003134:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003138:	4688      	mov	r8, r1
 800313a:	4691      	mov	r9, r2
 800313c:	eb18 0005 	adds.w	r0, r8, r5
 8003140:	eb49 0106 	adc.w	r1, r9, r6
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	461d      	mov	r5, r3
 800314a:	f04f 0600 	mov.w	r6, #0
 800314e:	196b      	adds	r3, r5, r5
 8003150:	eb46 0406 	adc.w	r4, r6, r6
 8003154:	461a      	mov	r2, r3
 8003156:	4623      	mov	r3, r4
 8003158:	f7fd f836 	bl	80001c8 <__aeabi_uldivmod>
 800315c:	4603      	mov	r3, r0
 800315e:	460c      	mov	r4, r1
 8003160:	461a      	mov	r2, r3
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <UART_SetConfig+0x384>)
 8003164:	fba3 2302 	umull	r2, r3, r3, r2
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	461d      	mov	r5, r3
 8003172:	f04f 0600 	mov.w	r6, #0
 8003176:	46a9      	mov	r9, r5
 8003178:	46b2      	mov	sl, r6
 800317a:	eb19 0309 	adds.w	r3, r9, r9
 800317e:	eb4a 040a 	adc.w	r4, sl, sl
 8003182:	4699      	mov	r9, r3
 8003184:	46a2      	mov	sl, r4
 8003186:	eb19 0905 	adds.w	r9, r9, r5
 800318a:	eb4a 0a06 	adc.w	sl, sl, r6
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800319a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800319e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031a2:	4689      	mov	r9, r1
 80031a4:	4692      	mov	sl, r2
 80031a6:	eb19 0005 	adds.w	r0, r9, r5
 80031aa:	eb4a 0106 	adc.w	r1, sl, r6
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	461d      	mov	r5, r3
 80031b4:	f04f 0600 	mov.w	r6, #0
 80031b8:	196b      	adds	r3, r5, r5
 80031ba:	eb46 0406 	adc.w	r4, r6, r6
 80031be:	461a      	mov	r2, r3
 80031c0:	4623      	mov	r3, r4
 80031c2:	f7fd f801 	bl	80001c8 <__aeabi_uldivmod>
 80031c6:	4603      	mov	r3, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	461a      	mov	r2, r3
 80031cc:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <UART_SetConfig+0x384>)
 80031ce:	fba3 1302 	umull	r1, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2164      	movs	r1, #100	; 0x64
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	3332      	adds	r3, #50	; 0x32
 80031e0:	4a27      	ldr	r2, [pc, #156]	; (8003280 <UART_SetConfig+0x384>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031ee:	4498      	add	r8, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	461d      	mov	r5, r3
 80031f4:	f04f 0600 	mov.w	r6, #0
 80031f8:	46a9      	mov	r9, r5
 80031fa:	46b2      	mov	sl, r6
 80031fc:	eb19 0309 	adds.w	r3, r9, r9
 8003200:	eb4a 040a 	adc.w	r4, sl, sl
 8003204:	4699      	mov	r9, r3
 8003206:	46a2      	mov	sl, r4
 8003208:	eb19 0905 	adds.w	r9, r9, r5
 800320c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800321c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003220:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003224:	4689      	mov	r9, r1
 8003226:	4692      	mov	sl, r2
 8003228:	eb19 0005 	adds.w	r0, r9, r5
 800322c:	eb4a 0106 	adc.w	r1, sl, r6
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	461d      	mov	r5, r3
 8003236:	f04f 0600 	mov.w	r6, #0
 800323a:	196b      	adds	r3, r5, r5
 800323c:	eb46 0406 	adc.w	r4, r6, r6
 8003240:	461a      	mov	r2, r3
 8003242:	4623      	mov	r3, r4
 8003244:	f7fc ffc0 	bl	80001c8 <__aeabi_uldivmod>
 8003248:	4603      	mov	r3, r0
 800324a:	460c      	mov	r4, r1
 800324c:	461a      	mov	r2, r3
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <UART_SetConfig+0x384>)
 8003250:	fba3 1302 	umull	r1, r3, r3, r2
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	2164      	movs	r1, #100	; 0x64
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	3332      	adds	r3, #50	; 0x32
 8003262:	4a07      	ldr	r2, [pc, #28]	; (8003280 <UART_SetConfig+0x384>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	f003 0207 	and.w	r2, r3, #7
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4442      	add	r2, r8
 8003274:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003276:	e1b2      	b.n	80035de <UART_SetConfig+0x6e2>
 8003278:	40011000 	.word	0x40011000
 800327c:	40011400 	.word	0x40011400
 8003280:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4ad7      	ldr	r2, [pc, #860]	; (80035e8 <UART_SetConfig+0x6ec>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d005      	beq.n	800329a <UART_SetConfig+0x39e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4ad6      	ldr	r2, [pc, #856]	; (80035ec <UART_SetConfig+0x6f0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	f040 80d1 	bne.w	800343c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800329a:	f7ff f959 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 800329e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	469a      	mov	sl, r3
 80032a4:	f04f 0b00 	mov.w	fp, #0
 80032a8:	46d0      	mov	r8, sl
 80032aa:	46d9      	mov	r9, fp
 80032ac:	eb18 0308 	adds.w	r3, r8, r8
 80032b0:	eb49 0409 	adc.w	r4, r9, r9
 80032b4:	4698      	mov	r8, r3
 80032b6:	46a1      	mov	r9, r4
 80032b8:	eb18 080a 	adds.w	r8, r8, sl
 80032bc:	eb49 090b 	adc.w	r9, r9, fp
 80032c0:	f04f 0100 	mov.w	r1, #0
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032d4:	4688      	mov	r8, r1
 80032d6:	4691      	mov	r9, r2
 80032d8:	eb1a 0508 	adds.w	r5, sl, r8
 80032dc:	eb4b 0609 	adc.w	r6, fp, r9
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	f04f 0400 	mov.w	r4, #0
 80032f2:	0094      	lsls	r4, r2, #2
 80032f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032f8:	008b      	lsls	r3, r1, #2
 80032fa:	461a      	mov	r2, r3
 80032fc:	4623      	mov	r3, r4
 80032fe:	4628      	mov	r0, r5
 8003300:	4631      	mov	r1, r6
 8003302:	f7fc ff61 	bl	80001c8 <__aeabi_uldivmod>
 8003306:	4603      	mov	r3, r0
 8003308:	460c      	mov	r4, r1
 800330a:	461a      	mov	r2, r3
 800330c:	4bb8      	ldr	r3, [pc, #736]	; (80035f0 <UART_SetConfig+0x6f4>)
 800330e:	fba3 2302 	umull	r2, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	469b      	mov	fp, r3
 800331c:	f04f 0c00 	mov.w	ip, #0
 8003320:	46d9      	mov	r9, fp
 8003322:	46e2      	mov	sl, ip
 8003324:	eb19 0309 	adds.w	r3, r9, r9
 8003328:	eb4a 040a 	adc.w	r4, sl, sl
 800332c:	4699      	mov	r9, r3
 800332e:	46a2      	mov	sl, r4
 8003330:	eb19 090b 	adds.w	r9, r9, fp
 8003334:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003344:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003348:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800334c:	4689      	mov	r9, r1
 800334e:	4692      	mov	sl, r2
 8003350:	eb1b 0509 	adds.w	r5, fp, r9
 8003354:	eb4c 060a 	adc.w	r6, ip, sl
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4619      	mov	r1, r3
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	f04f 0400 	mov.w	r4, #0
 800336a:	0094      	lsls	r4, r2, #2
 800336c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003370:	008b      	lsls	r3, r1, #2
 8003372:	461a      	mov	r2, r3
 8003374:	4623      	mov	r3, r4
 8003376:	4628      	mov	r0, r5
 8003378:	4631      	mov	r1, r6
 800337a:	f7fc ff25 	bl	80001c8 <__aeabi_uldivmod>
 800337e:	4603      	mov	r3, r0
 8003380:	460c      	mov	r4, r1
 8003382:	461a      	mov	r2, r3
 8003384:	4b9a      	ldr	r3, [pc, #616]	; (80035f0 <UART_SetConfig+0x6f4>)
 8003386:	fba3 1302 	umull	r1, r3, r3, r2
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2164      	movs	r1, #100	; 0x64
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	3332      	adds	r3, #50	; 0x32
 8003398:	4a95      	ldr	r2, [pc, #596]	; (80035f0 <UART_SetConfig+0x6f4>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a4:	4498      	add	r8, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	469b      	mov	fp, r3
 80033aa:	f04f 0c00 	mov.w	ip, #0
 80033ae:	46d9      	mov	r9, fp
 80033b0:	46e2      	mov	sl, ip
 80033b2:	eb19 0309 	adds.w	r3, r9, r9
 80033b6:	eb4a 040a 	adc.w	r4, sl, sl
 80033ba:	4699      	mov	r9, r3
 80033bc:	46a2      	mov	sl, r4
 80033be:	eb19 090b 	adds.w	r9, r9, fp
 80033c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033da:	4689      	mov	r9, r1
 80033dc:	4692      	mov	sl, r2
 80033de:	eb1b 0509 	adds.w	r5, fp, r9
 80033e2:	eb4c 060a 	adc.w	r6, ip, sl
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4619      	mov	r1, r3
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	f04f 0400 	mov.w	r4, #0
 80033f8:	0094      	lsls	r4, r2, #2
 80033fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033fe:	008b      	lsls	r3, r1, #2
 8003400:	461a      	mov	r2, r3
 8003402:	4623      	mov	r3, r4
 8003404:	4628      	mov	r0, r5
 8003406:	4631      	mov	r1, r6
 8003408:	f7fc fede 	bl	80001c8 <__aeabi_uldivmod>
 800340c:	4603      	mov	r3, r0
 800340e:	460c      	mov	r4, r1
 8003410:	461a      	mov	r2, r3
 8003412:	4b77      	ldr	r3, [pc, #476]	; (80035f0 <UART_SetConfig+0x6f4>)
 8003414:	fba3 1302 	umull	r1, r3, r3, r2
 8003418:	095b      	lsrs	r3, r3, #5
 800341a:	2164      	movs	r1, #100	; 0x64
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	3332      	adds	r3, #50	; 0x32
 8003426:	4a72      	ldr	r2, [pc, #456]	; (80035f0 <UART_SetConfig+0x6f4>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4442      	add	r2, r8
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	e0d0      	b.n	80035de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800343c:	f7ff f874 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8003440:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	469a      	mov	sl, r3
 8003446:	f04f 0b00 	mov.w	fp, #0
 800344a:	46d0      	mov	r8, sl
 800344c:	46d9      	mov	r9, fp
 800344e:	eb18 0308 	adds.w	r3, r8, r8
 8003452:	eb49 0409 	adc.w	r4, r9, r9
 8003456:	4698      	mov	r8, r3
 8003458:	46a1      	mov	r9, r4
 800345a:	eb18 080a 	adds.w	r8, r8, sl
 800345e:	eb49 090b 	adc.w	r9, r9, fp
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800346e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003472:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003476:	4688      	mov	r8, r1
 8003478:	4691      	mov	r9, r2
 800347a:	eb1a 0508 	adds.w	r5, sl, r8
 800347e:	eb4b 0609 	adc.w	r6, fp, r9
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4619      	mov	r1, r3
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	f04f 0400 	mov.w	r4, #0
 8003494:	0094      	lsls	r4, r2, #2
 8003496:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800349a:	008b      	lsls	r3, r1, #2
 800349c:	461a      	mov	r2, r3
 800349e:	4623      	mov	r3, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	4631      	mov	r1, r6
 80034a4:	f7fc fe90 	bl	80001c8 <__aeabi_uldivmod>
 80034a8:	4603      	mov	r3, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b50      	ldr	r3, [pc, #320]	; (80035f0 <UART_SetConfig+0x6f4>)
 80034b0:	fba3 2302 	umull	r2, r3, r3, r2
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	469b      	mov	fp, r3
 80034be:	f04f 0c00 	mov.w	ip, #0
 80034c2:	46d9      	mov	r9, fp
 80034c4:	46e2      	mov	sl, ip
 80034c6:	eb19 0309 	adds.w	r3, r9, r9
 80034ca:	eb4a 040a 	adc.w	r4, sl, sl
 80034ce:	4699      	mov	r9, r3
 80034d0:	46a2      	mov	sl, r4
 80034d2:	eb19 090b 	adds.w	r9, r9, fp
 80034d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034da:	f04f 0100 	mov.w	r1, #0
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034ee:	4689      	mov	r9, r1
 80034f0:	4692      	mov	sl, r2
 80034f2:	eb1b 0509 	adds.w	r5, fp, r9
 80034f6:	eb4c 060a 	adc.w	r6, ip, sl
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4619      	mov	r1, r3
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	f04f 0400 	mov.w	r4, #0
 800350c:	0094      	lsls	r4, r2, #2
 800350e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003512:	008b      	lsls	r3, r1, #2
 8003514:	461a      	mov	r2, r3
 8003516:	4623      	mov	r3, r4
 8003518:	4628      	mov	r0, r5
 800351a:	4631      	mov	r1, r6
 800351c:	f7fc fe54 	bl	80001c8 <__aeabi_uldivmod>
 8003520:	4603      	mov	r3, r0
 8003522:	460c      	mov	r4, r1
 8003524:	461a      	mov	r2, r3
 8003526:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <UART_SetConfig+0x6f4>)
 8003528:	fba3 1302 	umull	r1, r3, r3, r2
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	2164      	movs	r1, #100	; 0x64
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	3332      	adds	r3, #50	; 0x32
 800353a:	4a2d      	ldr	r2, [pc, #180]	; (80035f0 <UART_SetConfig+0x6f4>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003546:	4498      	add	r8, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	469b      	mov	fp, r3
 800354c:	f04f 0c00 	mov.w	ip, #0
 8003550:	46d9      	mov	r9, fp
 8003552:	46e2      	mov	sl, ip
 8003554:	eb19 0309 	adds.w	r3, r9, r9
 8003558:	eb4a 040a 	adc.w	r4, sl, sl
 800355c:	4699      	mov	r9, r3
 800355e:	46a2      	mov	sl, r4
 8003560:	eb19 090b 	adds.w	r9, r9, fp
 8003564:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003574:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003578:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800357c:	4689      	mov	r9, r1
 800357e:	4692      	mov	sl, r2
 8003580:	eb1b 0509 	adds.w	r5, fp, r9
 8003584:	eb4c 060a 	adc.w	r6, ip, sl
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4619      	mov	r1, r3
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	f04f 0400 	mov.w	r4, #0
 800359a:	0094      	lsls	r4, r2, #2
 800359c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035a0:	008b      	lsls	r3, r1, #2
 80035a2:	461a      	mov	r2, r3
 80035a4:	4623      	mov	r3, r4
 80035a6:	4628      	mov	r0, r5
 80035a8:	4631      	mov	r1, r6
 80035aa:	f7fc fe0d 	bl	80001c8 <__aeabi_uldivmod>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <UART_SetConfig+0x6f4>)
 80035b6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2164      	movs	r1, #100	; 0x64
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	3332      	adds	r3, #50	; 0x32
 80035c8:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <UART_SetConfig+0x6f4>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4442      	add	r2, r8
 80035da:	609a      	str	r2, [r3, #8]
}
 80035dc:	e7ff      	b.n	80035de <UART_SetConfig+0x6e2>
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e8:	40011000 	.word	0x40011000
 80035ec:	40011400 	.word	0x40011400
 80035f0:	51eb851f 	.word	0x51eb851f

080035f4 <__libc_init_array>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	4e0d      	ldr	r6, [pc, #52]	; (800362c <__libc_init_array+0x38>)
 80035f8:	4c0d      	ldr	r4, [pc, #52]	; (8003630 <__libc_init_array+0x3c>)
 80035fa:	1ba4      	subs	r4, r4, r6
 80035fc:	10a4      	asrs	r4, r4, #2
 80035fe:	2500      	movs	r5, #0
 8003600:	42a5      	cmp	r5, r4
 8003602:	d109      	bne.n	8003618 <__libc_init_array+0x24>
 8003604:	4e0b      	ldr	r6, [pc, #44]	; (8003634 <__libc_init_array+0x40>)
 8003606:	4c0c      	ldr	r4, [pc, #48]	; (8003638 <__libc_init_array+0x44>)
 8003608:	f000 f820 	bl	800364c <_init>
 800360c:	1ba4      	subs	r4, r4, r6
 800360e:	10a4      	asrs	r4, r4, #2
 8003610:	2500      	movs	r5, #0
 8003612:	42a5      	cmp	r5, r4
 8003614:	d105      	bne.n	8003622 <__libc_init_array+0x2e>
 8003616:	bd70      	pop	{r4, r5, r6, pc}
 8003618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800361c:	4798      	blx	r3
 800361e:	3501      	adds	r5, #1
 8003620:	e7ee      	b.n	8003600 <__libc_init_array+0xc>
 8003622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003626:	4798      	blx	r3
 8003628:	3501      	adds	r5, #1
 800362a:	e7f2      	b.n	8003612 <__libc_init_array+0x1e>
 800362c:	08003684 	.word	0x08003684
 8003630:	08003684 	.word	0x08003684
 8003634:	08003684 	.word	0x08003684
 8003638:	08003688 	.word	0x08003688

0800363c <memset>:
 800363c:	4402      	add	r2, r0
 800363e:	4603      	mov	r3, r0
 8003640:	4293      	cmp	r3, r2
 8003642:	d100      	bne.n	8003646 <memset+0xa>
 8003644:	4770      	bx	lr
 8003646:	f803 1b01 	strb.w	r1, [r3], #1
 800364a:	e7f9      	b.n	8003640 <memset+0x4>

0800364c <_init>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr

08003658 <_fini>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr
